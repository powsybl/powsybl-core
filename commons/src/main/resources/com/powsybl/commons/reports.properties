core.commons.missingKey = Cannot find message template with key: ''{0}''
core.cgmes.conversion.applyingPostprocessors = Applying postprocessors.
core.cgmes.conversion.applyingPreprocessors = Applying preprocessors.
core.cgmes.conversion.applyingProcessor = Applying processor: {processorName}.
core.cgmes.conversion.badTargetDeadbandRegulatingControl = Equipment ${equipmentId} has a regulating control with bad target deadband: ${targetDeadband}.
core.cgmes.conversion.badVoltageTargetValueRegulatingControl = Equipment ${equipmentId} has a regulating control with bad target value for voltage: ${targetValue}.
core.cgmes.conversion.buildingMappings = Building mappings.
core.cgmes.conversion.CGMESConversion = Importing CGMES file(s) with basename '${basename}'
core.cgmes.conversion.CGMESTriplestore = Reading CGMES Triplestore
core.cgmes.conversion.convertingElementType = Converting ${elementType}.
core.cgmes.conversion.danglingLineDisconnectedAtBoundaryHasBeenDisconnected = DanglingLine ${danglingLineId} was connected at network side and disconnected at boundary side. It has been disconnected also at network side.
core.cgmes.conversion.ExportedCgmesId = CGMES exported model identifier: ${cgmesId} for subset ${cgmesSubset} of network ${networkId}
core.cgmes.conversion.fixingDanglingLinesIssues = Fixing issues with dangling lines.
core.cgmes.conversion.importedCgmesNetwork = CGMES network ${networkId} is imported.
core.cgmes.conversion.inconsistentProfilesTPRequired = Network contains node/breaker ${networkId} information. References to Topological Nodes in SSH/SV files will not be valid if TP is not exported.
core.cgmes.conversion.invalidAngleVoltageBus = Node ${nodeId} in substation ${substation}, voltageLevel ${voltageLevel}, bus ${bus} has invalid value for voltage and/or angle. Voltage magnitude is ${voltage}, angle is ${angle}.
core.cgmes.conversion.invalidAngleVoltageNode = Node ${nodeId} has invalid value for voltage and/or angle. Voltage magnitude is ${voltage}, angle is ${angle}.
core.cgmes.conversion.missingMandatoryAttribute = Could't retrieve mandatory attribute: ${attributeName} of ${objectClass}: ${objectId}.
core.cgmes.conversion.multipleUnpairedDanglingLinesAtSameBoundary = Multiple unpaired DanglingLines were connected at the same boundary side. Adjusted original injection from (${p0}, ${q0}) to (${p0Adjusted}, ${q0Adjusted}) for dangling line ${danglingLineId}.
core.cgmes.conversion.nominalVoltageIsZero = Ignoring VoltageLevel: ${voltageLevelId} for its nominal voltage is equal to 0.
core.cgmes.conversion.removingUnattachedHvdcConverterStation = HVDC Converter Station ${converterId} will be removed since it has no attached HVDC line.
core.cgmes.conversion.settingVoltagesAndAngles = Setting voltages and angles.
core.cgmes.conversion.substationMapping = Original ${substationMappingSize} Substation container(s) connected by transformers have been merged in IIDM. Map of original Substation to IIDM: ${mapAsString}.
core.cgmes.conversion.voltageLevelMapping = Original ${voltageLevelMappingSize} VoltageLevel container(s) connected by switches have been merged in IIDM. Map of original VoltageLevel to IIDM: ${mapAsString}.
core.cgmes.model.CGMESFileRead = Instance file ${instanceFile}
core.dynasim.dynamicSimulationTool = Dynamic Simulation Tool
core.dynasim.groovyDynamicModels = Groovy Dynamic Models Supplier
core.dynasim.groovyEventModels = Groovy Event Models Supplier
core.dynasim.groovyOutputVariables = Groovy Output Variables Supplier
core.iidm.modification.busbarSectionNotFound = Busbar section ${busbarSectionId} is not found in voltage level ${voltageLevelId}
core.iidm.modification.busNotFound = Bus ${busId} is not found in voltage level ${voltageLevelId}
core.iidm.modification.busOrBusbarSectionVoltageLevelNotFound = Voltage level associated to ${busOrBusbarSectionId1} or ${busOrBusbarSectionId2} not found.
core.iidm.modification.connectableConnected = Connectable ${identifiable} has been connected on each side.
core.iidm.modification.connectableConnectedSide = Connectable ${identifiable} has been connected on side ${side}.
core.iidm.modification.connectableCreated = New connectable ${connectableId} of type ${connectableType} created.
core.iidm.modification.connectableNotConnected = Connectable ${identifiable} has NOT been connected on each side.
core.iidm.modification.connectableNotConnectedSide = Connectable ${identifiable} has NOT been connected on side ${side}.
core.iidm.modification.connectableNotFound = Connectable ${connectableId} is not found
core.iidm.modification.connectableNotInVoltageLevel = Given connectable ${connectableId} not in voltageLevel ${voltageLevelId}
core.iidm.modification.connectableNotSupported = Given connectable not supported: ${connectableClassName}.
core.iidm.modification.ConnectableRemoved = Connectable ${connectableId} removed
core.iidm.modification.countLowerThanMin = ${type} must be >= ${min}
core.iidm.modification.generatorLocalRegulation = Changed regulation for generator ${generatorId} to local instead of remote
core.iidm.modification.HvdcNotFound = Hvdc line ${hvdcLineId} is not found
core.iidm.modification.ignoredPositionOrder = Voltage level ${voltageLevelId} is BUS_BREAKER. Position order ${positionOrder} is ignored.
core.iidm.modification.ignoredShuntInAnotherVoltageLevel = Shunt compensator ${shuntId} has been ignored because it is not in the same voltage levels as the Lcc (${voltageLevelId1} or ${voltageLevelId2})
core.iidm.modification.ignoredVscShunts = Shunts ${shuntsIds} are ignored since converter stations ${converterStationId1} and ${converterStationId2} are VSC
core.iidm.modification.InternalConnectionRemoved = Internal connection between ${node1} and ${node2} removed
core.iidm.modification.limitsLost = Temporary limits on both sides for line ${lineId} : They are ignored
core.iidm.modification.lineCreated = Line ${lineId} created
core.iidm.modification.lineNotFound = Line ${lineId} is not found
core.iidm.modification.lineRemoved = Line ${lineId} removed
core.iidm.modification.lostDanglingLineExtensions = Extension [${extensions}] of dangling line ${danglingLineId} will be lost
core.iidm.modification.lostThreeWindingsTransformerAliases = Alias [${aliases}] of threeWindingsTransformer ${threeWindingsTransformerId} will be lost
core.iidm.modification.lostThreeWindingsTransformerExtensions = Extension [${extensions}] of threeWindingsTransformer ${threeWindingsTransformerId} will be lost
core.iidm.modification.lostThreeWindingsTransformerProperties = Property [${properties}] of threeWindingsTransformer ${threeWindingsTransformerId} will be lost
core.iidm.modification.lostTieLineExtensions = Extension [${extensions}] of tie line ${tieLineId} will be lost
core.iidm.modification.lostTwoWindingsTransformerAliases = Alias [${aliases}] of twoWindingsTransformer ${twoWindingsTransformerId} will be lost
core.iidm.modification.lostTwoWindingsTransformerExtensions = Extension [${extensions}] of twoWindingsTransformer ${twoWindingsTransformerId} will be lost
core.iidm.modification.lostTwoWindingsTransformerOperationalLimitsGroups = OperationalLimitsGroups [${limits}] of twoWindingsTransformer ${twoWindingsTransformerId} will be lost
core.iidm.modification.lostTwoWindingsTransformerProperties = Property [${properties}] of twoWindingsTransformer ${twoWindingsTransformerId} will be lost
core.iidm.modification.networkMismatch = Network given in parameters and in injectionAdder are different. Injection '${injectionId}' of type {identifiableType} was added then removed
core.iidm.modification.networkModificationDryRun = Dry-run: Checking if network modification ${networkModification} can be applied on network '${networkNameOrId}'
core.iidm.modification.networkModificationDryRun-failure = Dry-run failed for ${networkModification}. The issue is: ${dryRunError}
core.iidm.modification.networkModificationDryRun-success = Dry-run: Network modifications can successfully be applied on network '${networkNameOrId}'
core.iidm.modification.newConnectableAdded = New feeder bay associated to ${connectableId} of type ${connectableType} was created and connected to voltage level ${voltageLevelId} on busbar section ${bbsId} with a closed disconnector and on ${parallelBbsNumber} parallel busbar sections with an open disconnector.
core.iidm.modification.newCouplingDeviceAdded = New coupling device was created on voltage level ${voltageLevelId}. It connects ${busOrBbsId1} and ${busOrBbsId2} with closed disconnectors
core.iidm.modification.newLineOnLineCreated = New line ${newLineId} was created and connected on a tee point to lines ${line1Id} and ${line2Id} replacing line ${originalLineId}.
core.iidm.modification.noBusbarSectionPositionExtension = No busbar section position extension found on ${bbsId}, only one disconnector is created.
core.iidm.modification.noConnectablePositionExtensions = No ConnectablePosition extension found on voltageLevel ${voltageLevel}. The ConnectablePosition extension is not created for new feeder ${connectableId}.
core.iidm.modification.noCouplingDeviceOnSameBusOrBusbarSection = No coupling device can be created on a same bus or busbar section (${busOrBbsId}).
core.iidm.modification.noTeePointAndOrTappedVoltageLevel = Unable to find the tee point and the tapped voltage level from lines ${line1Id}, ${line2Id} and ${line3Id}
core.iidm.modification.notFoundBusOrBusbarSection = Bus or busbar section ${identifiableId} not found
core.iidm.modification.notFoundShunt = Shunt ${shuntId} not found
core.iidm.modification.noVoltageLevelInCommon = Lines ${line1Id} and ${line2Id} should have one and only one voltage level in common at their extremities
core.iidm.modification.openDisconnectorsAdded = ${nbOpenDisconnectors} open disconnectors created on parallel busbar sections in voltage level ${voltageLevelId}
core.iidm.modification.plannedIdentifiableDisconnected = Identifiable ${identifiable} has been disconnected (planned disconnection) on each side.
core.iidm.modification.plannedIdentifiableDisconnectedSide = Identifiable ${identifiable} has been disconnected (planned disconnection) on side ${side}.
core.iidm.modification.plannedIdentifiableNotDisconnected = Identifiable ${identifiable} has NOT been disconnected (planned disconnection) on each side.
core.iidm.modification.plannedIdentifiableNotDisconnectedSide = Identifiable ${identifiable} has NOT been disconnected (planned disconnection) on side ${side}.
core.iidm.modification.positionAdjacentBbsIncoherent = Positions of adjacent busbar sections do not leave slots for new positions on busbar section ${bbsId}
core.iidm.modification.positionOrderAlreadyTaken = PositionOrder ${positionOrder} already taken. No position extension created.
core.iidm.modification.positionOrderTooHigh = PositionOrder ${positionOrder} too high (>${maxValue}). No position extension created.
core.iidm.modification.positionOrderTooLow = PositionOrder ${positionOrder} too low (<${minValue}). No position extension created.
core.iidm.modification.removeBayBusbarSectionConnectable = Cannot remove feeder bay for connectable ${connectableId}, as it is a busbarSection
core.iidm.modification.moveBayBusbarSectionConnectable = Cannot move feeder bay for connectable ${connectableId}, as it is a busbarSection
core.iidm.modification.removedTieLine = Removed tie line ${tieLineId} with pairing key ${pairingKey}
core.iidm.modification.removedTieLineAndAssociatedDanglingLines = Removed tie line ${tieLineId} and associated dangling lines ${danglingLineId1} and ${danglingLineId2} with pairing key ${pairingKey}
core.iidm.modification.RemoveFeederBayAborted = Remove feeder bay of ${connectableId} cannot go further node ${node}, as it is connected to ${otherConnectableId}
core.iidm.modification.removeHvdcLine = Hvdc line ${hvdcLineId} has been removed
core.iidm.modification.removeLccConverterStation = Lcc converter station ${lccConverterStationId} has been removed
core.iidm.modification.removeShuntCompensator = Shunt compensator ${shuntCompensatorId} has been removed
core.iidm.modification.removeSubstation = Substation ${substationId} and its voltage levels have been removed
core.iidm.modification.removeVoltageLevel = Voltage level ${voltageLevelId}, its equipments and the branches it is connected to have been removed
core.iidm.modification.removeVscConverterStation = Vsc converter station ${vscConverterStationId} has been removed
core.iidm.modification.replaced-3t2w-by-t3w = Replaced 3 TwoWindingsTransformers by ThreeWindingsTransformer
core.iidm.modification.replaced-t3w-by-3t2w = Replaced ThreeWindingsTransformer by 3 TwoWindingsTransformers
core.iidm.modification.scalingApplied = Successfully scaled on ${identifiableType} using mode ${mode} and type ${type} with a variation value asked of ${asked}. Variation done is ${done}
core.iidm.modification.substationNotFound = Substation ${substationId} is not found
core.iidm.modification.substationRemoved = Substation ${substationId} removed
core.iidm.modification.SwitchRemoved = Switch ${switchId} removed
core.iidm.modification.SymmetricalTopologyCreated = New symmetrical topology in voltage level ${voltageLevelId}: creation of ${busbarCount} bus(es) or busbar(s) with ${sectionCount} section(s) each.
core.iidm.modification.threeWindingsTransformerCreated = ThreeWindingsTransformer ${threeWindingsTransformerId} created
core.iidm.modification.threeWindingsTransformerRemoved = ThreeWindingsTransformer ${threeWindingsTransformerId} removed
core.iidm.modification.twoWindingsTransformerCreated = TwoWindingsTransformer ${twoWindingsTransformerId} created
core.iidm.modification.twoWindingsTransformerRemoved = TwoWindingsTransformer ${twoWindingsTransformerId} removed
core.iidm.modification.undefinedFictitiousSubstationId = Fictitious substation ID must be defined if a fictitious substation is to be created
core.iidm.modification.undefinedPercent = Percent should not be undefined
core.iidm.modification.undefinedSwitchKind = All switch kinds must be defined
core.iidm.modification.unexpectedDifferentVoltageLevels = ${busOrBbsId1} and ${busOrBbsId2} are in two different voltage levels.
core.iidm.modification.unexpectedIdentifiableType = Unexpected type of identifiable ${identifiableId}: ${identifiableType}
core.iidm.modification.unexpectedNegativePositionOrder = Position order is negative (${positionOrder}) for attachment in voltage level ${voltageLevelId}
core.iidm.modification.unexpectedNullPositionOrder = Position order is null for attachment in node-breaker voltage level ${voltageLevelId}
core.iidm.modification.unexpectedSwitchKindsCount = Unexpected switch kinds count (${switchKindsCount}). Should be ${expectedSwitchKindsCount}
core.iidm.modification.unplannedIdentifiableDisconnected = Identifiable ${identifiable} has been disconnected (unplanned disconnection) on each side.
core.iidm.modification.unplannedIdentifiableDisconnectedSide = Identifiable ${identifiable} has been disconnected (unplanned disconnection) on side ${side}.
core.iidm.modification.unplannedIdentifiableNotDisconnected = Identifiable ${identifiable} has NOT been disconnected (unplanned disconnection) on each side.
core.iidm.modification.unplannedIdentifiableNotDisconnectedSide = Identifiable ${identifiable} has NOT been disconnected (unplanned disconnection) on side ${side}.
core.iidm.modification.unsupportedIdentifiableType = Unsupported type ${identifiableType} for identifiable ${identifiableId}
core.iidm.modification.voltageConnectedOnLine = Voltage level ${voltageLevelId} connected to lines ${line1Id} and ${line2Id} replacing line ${originalLineId}.
core.iidm.modification.voltageLevelCreated = VoltageLevel ${voltageLevelId} created
core.iidm.modification.voltageLevelNotFound = Voltage level ${voltageLevelId} is not found
core.iidm.modification.voltageLevelRemoved = Voltage level ${vlId} removed
core.iidm.modification.voltageLevelRemovingEquipmentsLeft = Voltage level ${vlId} still contains equipments
core.iidm.modification.wrongSwitchKind = Switch kinds must be DISCONNECTOR or BREAKER
core.iidm.network.alreadyConnectedTerminal = A terminal of identifiable ${identifiable} is already connected.
core.iidm.network.alreadyDisconnectedTerminal = A terminal of identifiable ${identifiable} is already disconnected.
core.iidm.network.export_test = Export mock
core.iidm.network.IIDMValidation = Running validation checks on IIDM network ${networkId}
core.iidm.network.importDataSource = Import data source ${dataSource}
core.iidm.network.InconsistentAliasTypes = Inconsistencies of types for alias ${alias} type in dangling lines ${danglingLineId1} (type=${type1}) and ${danglingLineId2} (type=${type2}). Type is lost.
core.iidm.network.InconsistentAliasValues = Inconsistencies found for alias type '${type}'('${alias1}' for '${danglingLineId1}' and '${alias2}' for '${danglingLineId2}'). Types are respectively renamed as '${type}_1' and '${type}_2'.
core.iidm.network.InconsistentPropertyValues = Inconsistencies of property ${propertyName} between ${danglingLineId1} (value=${propertyValue1}) and ${danglingLineId2} (value=${propertyValue2}). Property is not added to merged line
core.iidm.network.MoveCommonAlias = Alias ${alias} found in dangling lines ${danglingLineId1} and ${danglingLineId2} is moved to their merged line.
core.iidm.network.PropertyOnlyOnOneSide = Inconsistencies of property ${propertyName} between both sides (${danglingLineId1) on side 1 and ${danglingLineId2} on side2) of merged line. Side ${side} has no value. Value on other side is kept.
core.iidm.network.testImportPostProcessor = testing import post processor
core.iidm.network.validationWarningBothRatioPhase = ${parent} has both Ratio and Phase Tap Changer.
core.iidm.network.validationWarningDuplicate = ${parent} duplicate point for active power {p}
core.iidm.serde.extensionNotFound = Extension ${extensionName} not found.
core.iidm.serde.extensionsNotFound = Not found extensions
core.iidm.serde.importedExtension = Extension ${extensionName} imported.
core.iidm.serde.importedExtensions = Imported extensions
core.iidm.serde.importedNetwork = Network ${networkId} is imported from ${format} format.
core.iidm.serde.validationWarnings = Validation warnings
core.iidm.serde.xiidmImportDone = XIIDM import done
core.timeseries.invalidVersionNumber = The version number for a versioned TimeSeries should not be equals to the default version number (${versionNumber}) at line ${line}
core.timeseries.timeseriesLoadingTime = ${tsNumber} time series loaded from CSV in ${timing} ms
core.ucte.activePowerUndefined = Node ${node}: active power is undefined, set value to 0
core.ucte.epsilonLineReactance = ${lineId} - Real line reactance must be larger than 0.05 ohm (${reactance} ohm)
core.ucte.epsilonTransformerNominalPower = ${transformerId} - Value must be positive, blank and zero is not allowed (${nominalPower} ohm)
core.ucte.fixUcteLines = Fix UCTE lines
core.ucte.fixUcteNodes = Fix UCTE nodes
core.ucte.fixUcteRegulations = Fix UCTE regulations
core.ucte.fixUcteTransformer = Fix UCTE transformers
core.ucte.negativeLineResistance=${lineId} - Real line resistance cannot be negative (${resistance} ohm)
core.ucte.nonZeroBusbarCouplerReactance = ${lineId} - Busbar coupler reactance must be zero (${reactance} ohm)
core.ucte.nonZeroBusbarCouplerResistance = ${lineId} - Busbar coupler resistance must be zero (${resistance} ohm)
core.ucte.nonZeroBusbarCouplerSusceptance = ${lineId} - Busbar coupler susceptance must be zero (${susceptance} ohm)
core.ucte.PqUndefinedReactivePower = Node ${node}: voltage is not regulated but reactive power is undefined, set value to 0
core.ucte.PvUndefinedVoltage = Node ${node}: voltage is regulated, but voltage setpoint is null (${voltageReference}), switch type code to PQ
core.ucte.UcteReading = Reading UCTE network file
core.ucte.UnsupportedTTBlock = TT block not supported
core.ucte.wrongAngleRegulationDu = ${transfoId} - For LTCs, transformer angle regulation voltage per tap should not be zero. Its absolute value should not be above 6 % (${du} %)
core.ucte.wrongPhaseRegulationDu = ${transfoId} - For LTCs, transformer phase regulation voltage per tap should not be zero. Its absolute value should not be above 6 % (${du} %)

core.commons.missingKey = Template de message non trouvé pour la clé ''{0}''
core.cgmes.conversion.applyingPostprocessors = Application de post-traitements.
core.cgmes.conversion.applyingPreprocessors = Application des préprocesseurs.
core.cgmes.conversion.applyingProcessor = Application du processeur : ${processorName}.
core.cgmes.conversion.badTargetDeadbandRegulatingControl = L'équipement ${equipmentId} régule avec une mauvaise cible de zone morte : ${targetDeadband}.
core.cgmes.conversion.badVoltageTargetValueRegulatingControl = L'équipement ${equipmentId} régule avec une valeur cible de tension incorrecte : ${targetValue}.
core.cgmes.conversion.buildingMappings = Création de correspondances.
core.cgmes.conversion.CGMESConversion = Importation du (des) fichier(s) CGMES avec le nom de base '${basename}'
core.cgmes.conversion.CGMESTriplestore = Lecture du Triplestore CGMES
core.cgmes.conversion.convertingElementType = Conversion de ${elementType}.
core.cgmes.conversion.danglingLineDisconnectedAtBoundaryHasBeenDisconnected = La ligne pendante ${danglingLineId} était connectée du côté du réseau et déconnectée du côté de la frontière. Elle a également été déconnectée du côté du réseau.
core.cgmes.conversion.ExportedCgmesId = Identifiant de modèle exporté par CGMES : ${cgmesId} pour le sous-ensemble ${cgmesSubset} du réseau ${networkId}
core.cgmes.conversion.fixingDanglingLinesIssues = Correction des problèmes liés aux lignes pendantes.
core.cgmes.conversion.importedCgmesNetwork = Le réseau CGMES ${networkId} a été importé.
core.cgmes.conversion.inconsistentProfilesTPRequired = Le réseau ${networkId} contient des informations en node/breaker. Les références aux noeuds topologiques dans les fichiers SSH/SV ne seront pas valides si le profile TP n'est pas exporté.
core.cgmes.conversion.invalidAngleVoltageBus = Le noeud ${nodeId} sur le site ${substation}, poste ${voltageLevel}, bus ${bus} a une valeur invalide pour la tension et/ou l'angle. L'amplitude de la tension est ${voltage}, l'angle est ${angle}.
core.cgmes.conversion.invalidAngleVoltageNode = La valeur de la tension et/ou de l'angle du noeud ${nodeId} n'est pas valide. L'amplitude de la tension est ${voltage}, l'angle est ${angle}.
core.cgmes.conversion.missingMandatoryAttribute = Impossible de récupérer l'attribut obligatoire : ${attributeName} de ${objectClass} : ${objectId}.
core.cgmes.conversion.multipleUnpairedDanglingLinesAtSameBoundary = Plusieurs lignes pendantes non appairées ont été connectées du même côté de la frontière. Ajustement de l'injection originale de (${p0}, ${q0}) à (${p0Adjusted}, ${q0Adjusted}) pour la ligne pendante ${danglingLineId}.
core.cgmes.conversion.nominalVoltageIsZero = Poste ignoré : ${voltageLevelId} car sa tension nominale est égale à 0.
core.cgmes.conversion.removingUnattachedHvdcConverterStation = La station de conversion HVDC ${converterId} va être enlevée car elle n'a pas de ligne HVDC de rattachement.
core.cgmes.conversion.settingVoltagesAndAngles = Réglage des tensions et des angles.
core.cgmes.conversion.substationMapping = ${substationMappingSize} sous stations connectées par des transformateurs ont été mergées dans l'IIDM. Map de la sous station d'origine en IIDM : ${mapAsString}.
core.cgmes.conversion.voltageLevelMapping = ${voltageLevelMappingSize} postes connectés par des switchs ont été mergés dans l'IIDM. Map du poste d'origine en IIDM : ${mapAsString}.
core.cgmes.model.CGMESFileRead = Fichier d'instance ${instanceFile}
core.dynasim.dynamicSimulationTool = Outils de simulation dynamique
core.dynasim.groovyDynamicModels = Fournisseur de modèles dynqamiques en groovy
core.dynasim.groovyEventModels = Fournisseur de modèles d'événement en groovy
core.dynasim.groovyOutputVariables = Fournisseur de variables de sortie en groovy
core.iidm.modification.busbarSectionNotFound = Jeu de barres ${busbarSectionId} introuvable dans le poste ${voltageLevelId}
core.iidm.modification.busNotFound = Bus ${busId} introuvable dans le poste ${voltageLevelId}
core.iidm.modification.busOrBusbarSectionVoltageLevelNotFound = Le poste associé à ${busOrBusbarSectionId1} ou ${busOrBusbarSectionId2} est introuvable.
core.iidm.modification.connectableConnected = Le connectable ${identifiable} a été connecté sur tous ses côtés.
core.iidm.modification.connectableConnectedSide = Le connectable ${identifiable} a été connecté sur son côté ${side}.
core.iidm.modification.connectableCreated = Le nouveau connectable ${connectableId} de type ${connectableType} a été créé.
core.iidm.modification.connectableNotConnected = Le connectable ${identifiable} n'a PAS été connecté sur tous ses côtés.
core.iidm.modification.connectableNotConnectedSide = Le connectable ${identifiable} n'a PAS été connécté sur son côté ${side}.
core.iidm.modification.connectableNotFound = Connectable ${connectableId} introuvable.
core.iidm.modification.connectableNotInVoltageLevel = Le connectable ${connectableId} n'est pas dans le poste ${voltageLevelId}.
core.iidm.modification.connectableNotSupported = Le connectable ${connectableClassName} n'est pas supporté.
core.iidm.modification.ConnectableRemoved = Le connectable ${connectableId} a été supprimée.
core.iidm.modification.countLowerThanMin = ${type} doit être >= ${min}
core.iidm.modification.generatorLocalRegulation = Le groupe ${generatorId} est passé du réglage local au réglage distant.
core.iidm.modification.HvdcNotFound = Ligne HVDC ${hvdcLineId} introuvable.
core.iidm.modification.ignoredPositionOrder = Le poste ${voltageLevelId} est en BUS_BREAKER. La position d'ordre ${positionOrder} est ignorée.
core.iidm.modification.ignoredShuntInAnotherVoltageLevel = La compensation de réactif ${shuntId} a été ignorée car aucun des postes de ses LCC ne correspond à son poste (${voltageLevelId1} or ${voltageLevelId2})
core.iidm.modification.ignoredVscShunts = Les compensations de réactif ${shuntsIds} sont ignorées car les stations de conversion ${converterStationId1} et ${converterStationId2} sont des VSC
core.iidm.modification.InternalConnectionRemoved = La connexion interne a été supprimée entre les noeuds ${node1} et ${node2}
core.iidm.modification.limitsLost = Limites temporaires présentes des deux côtés de la ligne ${lineId} : elles sont ignorées
core.iidm.modification.lineCreated = La ligne ${lineId} a été créée
core.iidm.modification.lineNotFound = Ligne ${lineId} introuvable
core.iidm.modification.lineRemoved = La ligne ${lineId} a été supprimée
core.iidm.modification.lostDanglingLineExtensions = Les extensions [${extensions}] de la ligne pendante ${danglingLineId} seront perdues
core.iidm.modification.lostThreeWindingsTransformerAliases = Les alias [${aliases}] des transformateurs à trois enroulements ${threeWindingsTransformerId} seront perdus
core.iidm.modification.lostThreeWindingsTransformerExtensions = Les extensions [${extensions}] du transformateur à trois enroulements ${threeWindingsTransformerId} seront perdues
core.iidm.modification.lostThreeWindingsTransformerProperties = Les propriétés [${properties}] du transformateur à trois enroulements ${threeWindingsTransformerId} seront perdues
core.iidm.modification.lostTieLineExtensions = Les extensions [${extensions}] de la ligne de jonction ${tieLineId} seront perdues
core.iidm.modification.lostTwoWindingsTransformerAliases = Les alias [${aliases}] du transformateur à deux enroulements ${twoWindingsTransformerId} seront perdus
core.iidm.modification.lostTwoWindingsTransformerExtensions = Les extensions [${extensions}] du transformateur à deux enroulements ${twoWindingsTransformerId} seront perdues
core.iidm.modification.lostTwoWindingsTransformerOperationalLimitsGroups = Les groupes de limites opérationnelles [${limits}] du transformateur à deux enroulements ${twoWindingsTransformerId} seront perdus
core.iidm.modification.lostTwoWindingsTransformerProperties = Les propriétés [${properties}] du transformateur à deux enroulements ${twoWindingsTransformerId} seront perdues
core.iidm.modification.networkMismatch = Les réseaux passés en paramètres et pour l'ajout d'injection sont différents. L'injection '${injectionId}' de type ${identifiableType} a été ajoutée puis supprimée
core.iidm.modification.networkModificationDryRun = Test à blanc : test de faisabilité de la modification de réseau ${networkModification} sur le réseau '${networkNameOrId}'
core.iidm.modification.networkModificationDryRun-failure = Test à blanc : échec pour la modification de réseau ${networkModification} sur le réseau '${networkNameOrId}'. Problème : ${dryRunError}
core.iidm.modification.networkModificationDryRun-success = Test à blanc : succès pour la modification de réseau ${networkModification} sur le réseau '${networkNameOrId}'
core.iidm.modification.newConnectableAdded = Le nouveau départ de poste rattaché à ${connectableId} de type ${connectableType} a été créé et connecté au poste ${voltageLevelId} sur le jeu de barres ${bbsId} avec un sectionneur et sur ${parallelBbsNumber} tronçons de jeu de barres en parallèle avec un sectionneur ouvert.
core.iidm.modification.newCouplingDeviceAdded = Un nouveau dispositif de connexion a été créé sur le poste ${voltageLevelId}. Il connecte ${busOrBbsId1} avec ${busOrBbsId2} part des sectionneurs fermés
core.iidm.modification.newLineOnLineCreated = Une nouvelle ligne ${newLineId} a été créée et connectée en piquage sur les lignes ${line1Id} et ${line2Id} pour remplacer la ligne ${originalLineId}.
core.iidm.modification.noBusbarSectionPositionExtension = Aucune extension trouvée pour le jeu de barres ${bbsId}, seul un sectionneur a été créé.
core.iidm.modification.noConnectablePositionExtensions = Aucune extension "ConnectablePosition" n'a été trouvée sur le poste ${voltageLevel}. Pas de création d'extension "ConnectablePosition" sur le nouveau départ ${connectableId}.
core.iidm.modification.noCouplingDeviceOnSameBusOrBusbarSection = Aucun dispositif de couplage ne peut être créé sur le même bus ou jeu de barres (${busOrBbsId}).
core.iidm.modification.noTeePointAndOrTappedVoltageLevel = Impossible de trouver le point de piquage et les postes en dérivation des lignes ${line1Id}, ${line2Id} et ${line3Id}
core.iidm.modification.notFoundBusOrBusbarSection = Bus ou tronçon du jeu de barres ${identifiableId} introuvable
core.iidm.modification.notFoundShunt = Résistance en dérivation ${shuntId} introuvable
core.iidm.modification.noVoltageLevelInCommon = Les lignes ${line1Id} et ${line2Id} devraient avoir exactement un seul poste en commun à leurs extrémités
core.iidm.modification.openDisconnectorsAdded = ${nbOpenDisconnectors} sectionneurs ouverts créés sur des tronçons de jeu de barres en parallèle sur le poste ${voltageLevelId}
core.iidm.modification.plannedIdentifiableDisconnected = L'identifiable ${identifiable} a été déconnecté (déconnexion planifiée) de tous ses côtés.
core.iidm.modification.plannedIdentifiableDisconnectedSide = L'identifiable ${identifiable} a été déconnecté (déconnexion planifiée) de son côté ${side}.
core.iidm.modification.plannedIdentifiableNotDisconnected = L'dentifiable ${identifiable} n'a PAS été déconnecté (déconnexion planifiée) de tous ses côtés.
core.iidm.modification.plannedIdentifiableNotDisconnectedSide = L'identifiable ${identifiable} n'a PAS été déconnécté (déconnexion planifiée) de son côté ${side}.
core.iidm.modification.positionAdjacentBbsIncoherent = Les positions des tronçons des jeux de barres adjacents ne laissent pas d'espace pour de nouvelles positions sur le le tronçon de jeu de barres ${bbsId}
core.iidm.modification.positionOrderAlreadyTaken = La position d'ordre ${positionOrder} est déjà prise. Pas d'extension de position créée.
core.iidm.modification.positionOrderTooHigh = La position d'ordre ${positionOrder} est trop élevée (>${maxValue}). Pas d'extension de position créée.
core.iidm.modification.positionOrderTooLow = La position d'ordre ${positionOrder} est trop basse (<${minValue}). Pas d'extension de position créée.
core.iidm.modification.removeBayBusbarSectionConnectable = Impossible de supprimer le départ du connectable ${connectableId} car c'est un tronçon de jeu de barres.
core.iidm.modification.removedTieLine = Suppression de la ligne de jonction ${tieLineId} et de la clef de correspondance ${pairingKey}
core.iidm.modification.removedTieLineAndAssociatedDanglingLines = Suppression de la ligne de jonction ${tieLineId}, des lignes pendantes associées ${danglingLineId1} et ${danglingLineId2} et de la clef de correspondance ${pairingKey}
core.iidm.modification.RemoveFeederBayAborted = La suppression du départ de ${connectableId} ne peut pas se propager plus après le noeud ${node}, car il est connecté à ${otherConnectableId}
core.iidm.modification.removeHvdcLine = La ligne HVDC ${hvdcLineId} a été supprimée
core.iidm.modification.removeLccConverterStation = La station de conversion LCC ${lccConverterStationId} a été supprimée
core.iidm.modification.removeShuntCompensator = La compensation de réactif ${shuntCompensatorId} a été supprimée
core.iidm.modification.removeSubstation = Le site ${substationId} et ses postes ont été supprimés
core.iidm.modification.removeVoltageLevel = Le poste ${voltageLevelId} ainsi que les équipements et branches sur lesquels il est connecté ont été supprimés
core.iidm.modification.removeVscConverterStation = La station de conversion VSC ${vscConverterStationId} a été supprimée
core.iidm.modification.replaced-3t2w-by-t3w = Remplacement de 3 transformateurs à deux enroulements par un transformateur à trois enroulements
core.iidm.modification.replaced-t3w-by-3t2w = Remplacement d'un transformateur à trois enroulements par 3 transformateurs à deux enroulements
core.iidm.modification.scalingApplied = Mise à l'échelle réussie de ${identifiableType} en utilisant le mode ${mode} et le type ${type} avec la variation ${asked}. La variation effectuée est ${done}
core.iidm.modification.substationNotFound = Site ${substationId} introuvable
core.iidm.modification.substationRemoved = Le site ${substationId} a été supprimé
core.iidm.modification.SwitchRemoved = Le switch ${switchId} a été supprimé
core.iidm.modification.SymmetricalTopologyCreated = Nouvelle topologie symétrique sur le poste ${voltageLevelId}: création de ${busbarCount} bus ou jeux de barres avec ${sectionCount} tronçons chacun.
core.iidm.modification.threeWindingsTransformerCreated = Transformateur à trois enroulements ${threeWindingsTransformerId} créé
core.iidm.modification.threeWindingsTransformerRemoved = Le transformateur à trois enroulements ${threeWindingsTransformerId} a été supprimé
core.iidm.modification.twoWindingsTransformerCreated = Transformateur à deux enroulements ${twoWindingsTransformerId} créé
core.iidm.modification.twoWindingsTransformerRemoved = Le transformateur à deux enroulements ${twoWindingsTransformerId} a été supprimé
core.iidm.modification.undefinedFictitiousSubstationId = Pour créer un site fictif un ID doit être renseigné
core.iidm.modification.undefinedPercent = Le pourcentage doit être défini
core.iidm.modification.undefinedSwitchKind = Les types de switch doivent être définis
core.iidm.modification.unexpectedDifferentVoltageLevels = ${busOrBbsId1} et ${busOrBbsId2} sont sur des postes différents.
core.iidm.modification.unexpectedIdentifiableType = L'identifiable ${identifiableId} a un type inattendu : ${identifiableType}
core.iidm.modification.unexpectedNegativePositionOrder = La position d'ordre de rattachement au poste ${voltageLevelId} est négative (${positionOrder})
core.iidm.modification.unexpectedNullPositionOrder = La position d'ordre de rattachement au poste ${voltageLevelId} en node/breaker est nulle
core.iidm.modification.unexpectedSwitchKindsCount = Nombre de types de switch inattendu : ${switchKindsCount} contre ${expectedSwitchKindsCount} attendus
core.iidm.modification.unplannedIdentifiableDisconnected = L'identifiable ${identifiable} a été déconnecté (déconnexion non planifiée) de tous ses côtés.
core.iidm.modification.unplannedIdentifiableDisconnectedSide = L'identifiable ${identifiable} a été déconnecté (déconnexion non planifiée) de son côté ${side}.
core.iidm.modification.unplannedIdentifiableNotDisconnected = L'identifiable ${identifiable} n'a PAS été déconnecté (déconnexion non planifiée) de tous ses côtés.
core.iidm.modification.unplannedIdentifiableNotDisconnectedSide = L'identifiable ${identifiable} n'a PAS été déconnecté (déconnexion non planifiée) de son côté ${side}.
core.iidm.modification.unsupportedIdentifiableType = Type ${identifiableType} non géré pour l'identifiable ${identifiableId}
core.iidm.modification.voltageConnectedOnLine = Le poste ${voltageLevelId} connecté aux lignes ${line1Id} et ${line2Id} remplace la ligne ${originalLineId}.
core.iidm.modification.voltageLevelCreated = Poste ${voltageLevelId} créé
core.iidm.modification.voltageLevelNotFound = Poste ${voltageLevelId} introuvable
core.iidm.modification.voltageLevelRemoved = Le poste ${vlId} a été supprimé
core.iidm.modification.voltageLevelRemovingEquipmentsLeft = Le poste ${vlId} contient toujours des équipements
core.iidm.modification.wrongSwitchKind = Les types de switch doivent être soit DISCONNECTOR soit BREAKER
core.iidm.network.alreadyConnectedTerminal = La borne de l'identifiable ${identifiable} est déjà connectée.
core.iidm.network.alreadyDisconnectedTerminal = La borne de l'identifiable ${identifiable} est déjà déconnectée.
core.iidm.network.export_test = Export du mock
core.iidm.network.IIDMValidation = Exécution de contrôles de validation sur le réseau IIDM ${networkId}
core.iidm.network.importDataSource = Import de la donnée ${dataSource}
core.iidm.network.InconsistentAliasTypes = Incohérence des types de l'alias '${alias}' entre celui de la ligne pendante ${danglingLineId1} (type=${type1}) et celui de la ligne pendante ${danglingLineId2} (type=${type2}). Perte de l'information du type.
core.iidm.network.InconsistentAliasValues = Incohérence des alias de type '${type}' entre celui de la ligne pendante ${danglingLineId1} (alias=${alias1}) et celui de la ligne pendante ${danglingLineId2} (alias=${alias2}). Les types sont respectivement renommés '${type}_1' et '${type}_2'.
core.iidm.network.InconsistentPropertyValues = Incohérence sur la propriété ${propertyName} entre ${danglingLineId1} (valeur=${propertyValue1}) et ${danglingLineId2} (valeur=${propertyValue2}). La propriété n'est pas ajoutée sur la ligne fusion de ces lignes.
core.iidm.network.MoveCommonAlias = L'alias ${alias} est présent sur les deux lignes pendantes ${danglingLineId1} et ${danglingLineId2} est donc déplacé sur la fusion des lignes.
core.iidm.network.PropertyOnlyOnOneSide = Incohérence sur la propriété {propertyName} entre le côté 1 de la ligne pendante ${danglingLineId1} et le côté 2 de la ligne pendante ${danglingLineId2}. Le côté ${side} n'a pas de valeur. La valeur '${propertyValue}' de l'autre côté est gardée.
core.iidm.network.testImportPostProcessor = Test du post-processeur d'import
core.iidm.network.validationWarningBothRatioPhase = ${parent} a à la fois un régleur de rapport de transformation et un régleur d'angle de transformation.
core.iidm.network.validationWarningDuplicate = ${parent} point de duplication de la puissance active ${p}
core.iidm.serde.extensionNotFound = Extension ${extensionName} introuvable.
core.iidm.serde.extensionsNotFound = Extensions introuvables
core.iidm.serde.importedExtension = Extension ${extensionName} importée.
core.iidm.serde.importedExtensions = Extensions importées
core.iidm.serde.importedNetwork = Le réseau ${networkId} est importé à partir du format ${format}.
core.iidm.serde.validationWarnings = Avertissements de validation
core.iidm.serde.xiidmImportDone = Import XIIDM terminé
core.timeseries.invalidVersionNumber = Le numéro de version pour une série temporelle versionnée ne doit pas être égal au numéro de version par défaut (${versionNumber}) ligne ${line}
core.timeseries.timeseriesLoadingTime = ${tsNumber} séries temporelles chargées du fichier CSV en ${timing} ms
core.ucte.activePowerUndefined = Noeud ${node}: la puissance active est indéfinie, valeur mise à 0
core.ucte.epsilonLineReactance = ${lineId} - La réactance réelle d'une ligne doit être plus grande que 0.05 ohm (${reactance} ohm)
core.ucte.epsilonTransformerNominalPower = ${transformerId} - La valeur doit être positive, les valeurs vide ou zéro sont interdites (${nominalPower} ohm)
core.ucte.fixUcteLines = Correction des lignes UCTE
core.ucte.fixUcteNodes = Correction des noeuds UCTE
core.ucte.fixUcteRegulations = Corrections des règles UCTE
core.ucte.fixUcteTransformer = Corrections des transformateurs UCTE
core.ucte.negativeLineResistance = ${lineId} - La résistance d'une ligne ne peut pas être négative (${resistance} ohm)
core.ucte.nonZeroBusbarCouplerReactance = ${lineId} - La réactance d'un coupleur de barres doit être zéro (${reactance} ohm)
core.ucte.nonZeroBusbarCouplerResistance = ${lineId} - La résistance du coupleur de barres doit être zéro (${resistance} ohm)
core.ucte.nonZeroBusbarCouplerSusceptance = ${lineId} - La susceptance du coupleur de barres doit être zéro (${susceptance} ohm)
core.ucte.PqUndefinedReactivePower = Noeud ${node} : il n'y a pas de tenue de tension mais la puissance réactive est indéfinie, valeur mise à 0
core.ucte.PvUndefinedVoltage = Noeud ${node} :  il n'y a pas de tenue de tension mais la tension de consigne est nulle (${voltageReference}), conversion du noeud en PQ
core.ucte.UcteReading = Lecture du fichier de réseau UCTE
core.ucte.UnsupportedTTBlock = Block TT non supporté
core.ucte.wrongAngleRegulationDu = ${transfoId} - Pour les LTCs, la tension de régulation de l'angle d'un transformateur par prise ne doit pas être nulle. Sa valeur absolue ne doit pas être supérieure à 6% (${du} %)
core.ucte.wrongPhaseRegulationDu = ${transfoId} - Pour les LTCs, la tension de régulation de phase d'un transformateur par prise ne doit pas être nulle. Sa valeur absolue ne doit pas être supérieure à 6% (${du} %)

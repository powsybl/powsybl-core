#
# Copyright (c) 2021, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

# include: CIM16.sparql

# query: boundaryNodes
# All pairs (Connectiviy Node, Topological Node) from a graph that has a modeProfile EquipmentBoundary-
# We expect all Connectivity Nodes have 1 and only one corresponding TopologicalNode
prefix md: <http://iec.ch/TC57/61970-552/ModelDescription/1#>
SELECT *
{
GRAPH ?graphBDEQ {
    ?FullModel md:Model.profile ?modelProfile .
    FILTER (regex(?modelProfile, "EquipmentBoundary-", "i"))
    ?ConnectivityNode
        a cim:ConnectivityNode ;
        cim:IdentifiedObject.name ?name ;
        cim:ConnectivityNode.ConnectivityNodeContainer ?container .
    ?BoundaryPoint
        a eu:BoundaryPoint ;
        eu:BoundaryPoint.ConnectivityNode ?ConnectivityNode .
    OPTIONAL { ?BoundaryPoint eu:IdentifiedObject.energyIdentCodeEic ?energyIdentCodeEicFromNode }
    OPTIONAL { ?container entsoe:IdentifiedObject.energyIdentCodeEic ?energyIdentCodeEicFromNodeContainer }
    OPTIONAL { ?ConnectivityNode cim:IdentifiedObject.description ?description }
}
OPTIONAL { GRAPH ?grapBDTP {
    ?ConnectivityNode cim:ConnectivityNode.TopologicalNode ?TopologicalNode .
    ?TopologicalNode cim:IdentifiedObject.name ?topologicalNodeName
}}
}

# query: modelIds
prefix md: <http://iec.ch/TC57/61970-552/ModelDescription/1#>
SELECT *
{ GRAPH ?graph {
    # We will return all model identifiers for FullModel objects of profile EquipmentCore
    ?FullModel
        a md:FullModel ;
        md:Model.modelingAuthoritySet ?modelingAuthoritySet ;
        md:Model.profile ?profile .
    FILTER (regex(?profile, "CoreEquipment", "i")
        && !regex(?profile, "EquipmentBoundary", "i"))
}}

# query: synchronousMachinesGenerators
SELECT *
WHERE {
{ GRAPH ?graph {
    ?SynchronousMachine
        a cim:SynchronousMachine ;
        cim:IdentifiedObject.name ?name ;
        cim:SynchronousMachine.type ?type ;
        cim:RotatingMachine.GeneratingUnit ?GeneratingUnit .
    # Some test cases of condensers have a (wrong) association with a generating unit,
    # So we explicitly check for the type of the synchronous machine
    VALUES ?type {
        cim:SynchronousMachineKind.generator
        cim:SynchronousMachineKind.generatorOrCondenser
        cim:SynchronousMachineKind.motor
        cim:SynchronousMachineKind.generatorOrMotor
        cim:SynchronousMachineKind.motorOrCondenser
        cim:SynchronousMachineKind.generatorOrCondenserOrMotor
    }
    OPTIONAL {
        ?SynchronousMachine cim:RotatingMachine.ratedS ?ratedS
       }
    ?GeneratingUnit
        a ?generatingUnitType ;
        cim:GeneratingUnit.minOperatingP ?minP ;
        cim:GeneratingUnit.maxOperatingP ?maxP ;
        cim:IdentifiedObject.name ?nameGeneratingUnit .
    OPTIONAL { ?GeneratingUnit cim:HydroGeneratingUnit.HydroPowerPlant ?HydroPowerPlant
        OPTIONAL {
            ?HydroPowerPlant cim:HydroPowerPlant.hydroPlantStorageType ?hydroPlantStorageType
        }
    }
    OPTIONAL {
        ?GeneratingUnit cim:WindGeneratingUnit.windGenUnitType ?windGenUnitType
    }
    OPTIONAL {
            SELECT ?GeneratingUnit (group_concat(?fossilFuelType;separator=";") as ?fossilFuelTypeList)
            WHERE {
                    ?FossilFuel a cim:FossilFuel;
                    cim:FossilFuel.fossilFuelType ?fossilFuelType;
                    cim:FossilFuel.ThermalGeneratingUnit ?GeneratingUnit .
            } GROUP BY ?GeneratingUnit
    }
    ?Terminal cim:Terminal.ConductingEquipment ?SynchronousMachine .
    OPTIONAL { ?SynchronousMachine cim:SynchronousMachine.minQ ?minQ }
    OPTIONAL { ?SynchronousMachine cim:SynchronousMachine.maxQ ?maxQ }
    OPTIONAL { ?SynchronousMachine cim:SynchronousMachine.InitialReactiveCapabilityCurve ?ReactiveCapabilityCurve }
    OPTIONAL { ?SynchronousMachine cim:RegulatingCondEq.RegulatingControl ?RegulatingControl }
    OPTIONAL { ?SynchronousMachine cim:SynchronousMachine.qPercent ?qPercent }
}}
OPTIONAL { GRAPH ?graphSSH {
    ?SynchronousMachine
        cim:RotatingMachine.p ?p ;
        cim:RotatingMachine.q ?q ;
        cim:SynchronousMachine.referencePriority ?referencePriority ;
        cim:SynchronousMachine.operatingMode ?operatingMode ;
        cim:RegulatingCondEq.controlEnabled ?controlEnabled .
}}
OPTIONAL { GRAPH ?graphSSH2 {
    ?GeneratingUnit cim:GeneratingUnit.normalPF ?normalPF
}}
}

# query: staticVarCompensators
SELECT *
WHERE {
{ GRAPH ?graph {
    ?StaticVarCompensator
        a cim:StaticVarCompensator ;
        cim:IdentifiedObject.name ?name ;
        cim:StaticVarCompensator.capacitiveRating ?capacitiveRating ;
        cim:StaticVarCompensator.inductiveRating ?inductiveRating ;
        cim:StaticVarCompensator.slope ?slope .
    ?Terminal cim:Terminal.ConductingEquipment ?StaticVarCompensator .
    OPTIONAL { ?StaticVarCompensator cim:StaticVarCompensator.sVCControlMode ?controlMode }
    OPTIONAL { ?StaticVarCompensator cim:StaticVarCompensator.voltageSetPoint ?voltageSetPoint }
    OPTIONAL { ?StaticVarCompensator cim:RegulatingCondEq.RegulatingControl ?RegulatingControl }
}}
OPTIONAL { GRAPH ?graphSSH  {
    ?StaticVarCompensator
        cim:StaticVarCompensator.q ?q ;
        cim:RegulatingCondEq.controlEnabled ?controlEnabled
}}
}

# query: operationalLimits
SELECT *
WHERE {
{ GRAPH ?graph {
    ?OperationalLimit
        a ?OperationalLimitSubclass ;
        cim:IdentifiedObject.name ?name ;
        cim:OperationalLimit.OperationalLimitSet ?OperationalLimitSet ;
        cim:OperationalLimit.OperationalLimitType ?OperationalLimitType .
    OPTIONAL { ?OperationalLimit eu:IdentifiedObject.shortName ?shortName }
    OPTIONAL { ?OperationalLimit cim:CurrentLimit.normalValue ?normalValue }
    OPTIONAL { ?OperationalLimit cim:ActivePowerLimit.normalValue ?normalValue }
    OPTIONAL { ?OperationalLimit cim:ApparentPowerLimit.normalValue ?normalValue }
    OPTIONAL { ?OperationalLimit cim:VoltageLimit.normalValue ?normalValue }
    OPTIONAL { ?OperationalLimitSet cim:IdentifiedObject.name ?OperationalLimitSetName }
    # operational limit sets can be attached to terminals or equipments
    OPTIONAL { ?OperationalLimitSet cim:OperationalLimitSet.Terminal ?Terminal }
    OPTIONAL { GRAPH ?graph2 {
        ?OperationalLimitSet cim:OperationalLimitSet.Equipment ?Equipment
        OPTIONAL { ?Equipment cim:Equipment.EquipmentContainer ?EquipmentContainer }
    }}
    ?OperationalLimitType
        a cim:OperationalLimitType ;
        cim:IdentifiedObject.name ?operationalLimitTypeName .
    OPTIONAL { ?OperationalLimitType cim:OperationalLimitType.direction ?direction }
    OPTIONAL { ?OperationalLimitType eu:OperationalLimitType.kind ?limitType }
    OPTIONAL { ?OperationalLimitType cim:OperationalLimitType.acceptableDuration ?acceptableDuration }
}}
OPTIONAL { GRAPH ?graphSSH {
    OPTIONAL { ?OperationalLimit cim:CurrentLimit.value ?value }
    OPTIONAL { ?OperationalLimit cim:ActivePowerLimit.value ?value }
    OPTIONAL { ?OperationalLimit cim:ApparentPowerLimit.value ?value }
    OPTIONAL { ?OperationalLimit cim:VoltageLimit.value ?value }
}}
}

# query: switches
SELECT *
WHERE {
{ GRAPH ?graph {
    ?Switch
        a ?type ;
        cim:Equipment.EquipmentContainer ?EquipmentContainer .
    VALUES ?type { cim:Switch cim:Breaker cim:Disconnector cim:LoadBreakSwitch cim:ProtectedSwitch cim:GroundDisconnector cim:Jumper } .
    OPTIONAL { ?Switch cim:IdentifiedObject.name ?name ; }
    OPTIONAL { ?Switch cim:Switch.retained ?retained }
    OPTIONAL { ?Switch cim:Switch.normalOpen ?normalOpen }
    ?Terminal1
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?Switch .
    OPTIONAL { ?Terminal1 cim:ACDCTerminal.sequenceNumber ?seq1 }
    ?Terminal2
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?Switch .
    OPTIONAL { ?Terminal2 cim:ACDCTerminal.sequenceNumber ?seq2 }
    FILTER ( bound(?seq1) && ?seq1 = "1" && bound(?seq2) && ?seq2 = "2"
        || !bound(?seq1) && !bound(?seq2) && str(?Terminal1) < str(?Terminal2) )
}}
OPTIONAL { GRAPH ?graphSSH {
    ?Switch cim:Switch.open ?open
}}
}

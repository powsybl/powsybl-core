#
# Copyright (c) 2017-2018, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

# query: modelIds
prefix md: <http://iec.ch/TC57/61970-552/ModelDescription/1#>
SELECT *
{ GRAPH ?graph {
    # We will return all model identifiers for FullModel objects of profile EquipmentCore
    ?FullModel
        a md:FullModel ;
        md:Model.modelingAuthoritySet ?modelingAuthoritySet ;
        md:Model.profile ?profile .
    FILTER (regex(?profile, "EquipmentCore", "i")
        && !regex(?profile, "EquipmentBoundary", "i")
        && !regex(?profile, "TopologyBoundary", "i"))
}}

# query: modelDates
prefix md: <http://iec.ch/TC57/61970-552/ModelDescription/1#>
SELECT *
{ GRAPH ?graph {
    # There are multiple FullModel instances.
    # We return all dates from all Model instances that are not a boundary model
    ?FullModel
        a md:FullModel ;
        md:Model.modelingAuthoritySet ?modelingAuthoritySet ;
        md:Model.created ?created ;
        md:Model.scenarioTime ?scenarioTime ;
        md:Model.profile ?profile .
    FILTER (!regex(?profile, "EquipmentBoundary", "i")
        && !regex(?profile, "TopologyBoundary", "i"))
}}

# query: modelProfiles
prefix md: <http://iec.ch/TC57/61970-552/ModelDescription/1#>
SELECT *
{ GRAPH ?graph {
    ?FullModel
        a md:FullModel ;
        md:Model.profile ?profile .
}}

# query: version
SELECT ?version
{ GRAPH ?graph {
    ?versionId cim:IEC61970CIMVersion.version ?version
}}

# query: numObjectsByType
# Only types in a namespace given as parameter
SELECT ?Type (COUNT (DISTINCT ?object) AS ?numObjects)
{ GRAPH ?graph {
     ?object a ?Type .
    FILTER (STRSTARTS(STR(?Type), "{0}"))
}}
GROUP BY ?Type

# query: allObjectsOfType
SELECT * 
{ GRAPH ?graph {
     ?object a cim:{0} ;
     ?attribute ?value .
}}

# query: boundaryNodes
# All topological nodes belonging to a graph that has a modelProfile that contains the string "TopologyBoundary"
# Union all connectivity nodes belonging to a graph that has profile EquipmentBoundaryOperation
prefix md: <http://iec.ch/TC57/61970-552/ModelDescription/1#>
SELECT *
{
{ GRAPH ?graphBDTP {
    ?FullModel md:Model.profile ?modelProfile .
    FILTER (regex(?modelProfile, "TopologyBoundary", "i"))
    ?Node
        a cim:TopologicalNode ;
        cim:IdentifiedObject.name ?Name
}}
UNION
{ GRAPH ?graphBDEQ {
    ?FullModel md:Model.profile ?modelProfile .
    FILTER (regex(?modelProfile, "EquipmentBoundaryOperation", "i"))
    ?Node
        a cim:ConnectivityNode ;
        cim:IdentifiedObject.name ?Name
}}
}

# query: baseVoltages
SELECT *
{ GRAPH ?graph {
    ?BaseVoltage cim:BaseVoltage.nominalVoltage ?nominalVoltage .
}}

# query: substations
SELECT ?Substation ?name ?SubRegion ?subRegionName ?Region ?regionName
{ GRAPH ?graph {
    ?Substation
        a cim:Substation ;
        cim:IdentifiedObject.name ?name ;
        cim:Substation.Region ?SubRegion .
    ?SubRegion
        cim:SubGeographicalRegion.Region ?Region ;
        cim:IdentifiedObject.name ?subRegionName .
    ?Region cim:IdentifiedObject.name ?regionName
}}

# query: voltageLevels
SELECT *
WHERE {
{ GRAPH ?graph {
    ?VoltageLevel
        a cim:VoltageLevel ;
        cim:VoltageLevel.Substation ?Substation ;
        cim:IdentifiedObject.name ?name ;
        cim:VoltageLevel.BaseVoltage ?BaseVoltage .
    OPTIONAL { ?VoltageLevel cim:VoltageLevel.lowVoltageLimit ?lowVoltageLimit }
    OPTIONAL { ?VoltageLevel cim:VoltageLevel.highVoltageLimit ?highVoltageLimit }
}}
OPTIONAL { GRAPH ?graph2 {
    ?BaseVoltage cim:BaseVoltage.nominalVoltage ?nominalVoltage .
}}
}

# query: terminals
SELECT *
WHERE {
{ GRAPH ?graph {
    ?Terminal
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?ConductingEquipment .
    ?ConductingEquipment a ?conductingEquipmentType .
    OPTIONAL { ?Terminal cim:IdentifiedObject.name ?name }
}}
OPTIONAL { GRAPH ?graphSSH {
    ?Terminal cim:ACDCTerminal.connected ?connected
}}
OPTIONAL { GRAPH ?graphSV {
    ?SvPowerFlow
        a cim:SvPowerFlow ;
        cim:SvPowerFlow.Terminal ?Terminal ;
        cim:SvPowerFlow.p ?p ;
        cim:SvPowerFlow.q ?q
}}
OPTIONAL { GRAPH ?graphCN {
		?Terminal cim:Terminal.ConnectivityNode ?ConnectivityNode .
}}
OPTIONAL { GRAPH ?graphTPT {
		?Terminal cim:Terminal.TopologicalNode ?TopologicalNode .
}}
}

# query: connectivityNodes
SELECT *
WHERE {
{ GRAPH ?graphCN2 {
	?ConnectivityNode cim:ConnectivityNode.ConnectivityNodeContainer ?ConnectivityNodeContainer
	OPTIONAL {
		?ConnectivityNode cim:IdentifiedObject.name ?name
	}
	OPTIONAL { ?ConnectivityNode entsoe:ConnectivityNode.fromEndIsoCode ?fromEndIsoCode }
	OPTIONAL { ?ConnectivityNode entsoe:ConnectivityNode.toEndIsoCode ?toEndIsoCode }
}}
OPTIONAL { GRAPH ?graphTPCN {
	?ConnectivityNode
	    cim:ConnectivityNode.TopologicalNode ?TopologicalNode .
	?TopologicalNode
	    cim:TopologicalNode.BaseVoltage ?BaseVoltage
	OPTIONAL { GRAPH ?graphSVT {
		?SvVoltageT 
			a cim:SvVoltage ;
	    	cim:SvVoltage.TopologicalNode ?TopologicalNode ;
			cim:SvVoltage.v ?v ;
			cim:SvVoltage.angle ?angle 
	}}
}}
}

# query: topologicalNodes
SELECT *
WHERE {
{ GRAPH ?graphTP {
	?TopologicalNode 
		cim:IdentifiedObject.name ?name ;
		cim:TopologicalNode.BaseVoltage ?BaseVoltage ;
		cim:TopologicalNode.ConnectivityNodeContainer ?ConnectivityNodeContainer
	OPTIONAL { ?TopologicalNode entsoe:TopologicalNode.fromEndIsoCode ?fromEndIsoCode }
	OPTIONAL { ?TopologicalNode entsoe:TopologicalNode.toEndIsoCode ?toEndIsoCode }
}}
OPTIONAL { GRAPH ?graphSVT {
	?SvVoltageT 
		a cim:SvVoltage ;
    	cim:SvVoltage.TopologicalNode ?TopologicalNode ;
		cim:SvVoltage.v ?v ;
		cim:SvVoltage.angle ?angle 
}}
}

# query: connectivityNodeContainers
SELECT *
WHERE {
{ GRAPH ?graphEQ {
    ?ConnectivityNodeContainer a ?connectivityNodeContainerType .
    VALUES ?connectivityNodeContainerType { cim:VoltageLevel cim:Bay cim:Line } .
    OPTIONAL {
        ?ConnectivityNodeContainer
            a cim:VoltageLevel ;
            cim:VoltageLevel.Substation ?Substation .
        BIND ( ?ConnectivityNodeContainer AS ?VoltageLevel )
    }
    OPTIONAL {
        ?ConnectivityNodeContainer a cim:Bay ;
            cim:Bay.VoltageLevel ?VoltageLevel .
        ?VoltageLevel cim:VoltageLevel.Substation ?Substation
    }
}}
}

# query: voltages
SELECT * 
{ GRAPH ?graphSV {
    ?SvVoltage 
    	a cim:SvVoltage ;
    	cim:SvVoltage.TopologicalNode ?TopologicalNode ;
    	cim:SvVoltage.v ?v ;
    	cim:SvVoltage.angle ?angle 
}}

# query: operationalLimits
SELECT *
WHERE
{ GRAPH ?graph {
    {
        ?Terminal a cim:Terminal .
        ?OperationalLimitSet cim:OperationalLimitSet.Terminal ?Terminal .
    }
    # operational limit sets can also be attached directly to equipments
    UNION
    {
        ?OperationalLimitSet cim:OperationalLimitSet.Equipment ?Equipment .
        ?Equipment a ?EquipmentClass .
    }
    ?OperationalLimit
        cim:OperationalLimit.OperationalLimitSet ?OperationalLimitSet ;
        cim:OperationalLimit.OperationalLimitType ?OperationalLimitType ;
        cim:IdentifiedObject.name ?name .
        {
            ?OperationalLimit a $OperationalLimitSubclass;
            {
                ?OperationalLimit a cim:CurrentLimit ;
                cim:CurrentLimit.value ?value .
            }
            UNION
            {
                ?OperationalLimit a cim:ApparentPowerLimit ;
                cim:ApparentPowerLimit.value ?value .
            }
            UNION
            {
                ?OperationalLimit a cim:VoltageLimit ;
                cim:VoltageLimit.value ?value .
            }
        }
    ?OperationalLimitType
        cim:IdentifiedObject.name ?operationalLimitTypeName .
    OPTIONAL { ?OperationalLimitType cim:OperationalLimitType.direction ?direction }
    OPTIONAL { ?OperationalLimitType entsoe:OperationalLimitType.limitType ?limitType }
    OPTIONAL { ?OperationalLimitType cim:OperationalLimitType.acceptableDuration ?acceptableDuration }
}}

# query: busbarSections
SELECT *
WHERE {
{ GRAPH ?graph {
    ?BusbarSection
        a cim:BusbarSection ;
        cim:IdentifiedObject.name ?name .
    ?Terminal cim:Terminal.ConductingEquipment ?BusbarSection
}}
}

# query: switches
SELECT *
WHERE {
{ GRAPH ?graph {
    ?Switch
        a ?type ;
        cim:IdentifiedObject.name ?name ;
        cim:Equipment.EquipmentContainer ?EquipmentContainer .
    VALUES ?type { cim:Switch cim:Breaker cim:Disconnector cim:LoadBreakSwitch cim:ProtectedSwitch } .
    ?Terminal1
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?Switch .
    ?Terminal2
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?Switch .
    FILTER ( STR(?Terminal1) < STR(?Terminal2) )
}}
OPTIONAL { GRAPH ?graphSSH {
    ?Switch cim:Switch.open ?open
}}
}

# query: acLineSegments
SELECT *
WHERE {
{ GRAPH ?graph {
    ?ACLineSegment
        a cim:ACLineSegment ;
        cim:ACLineSegment.r ?r ;
        cim:ACLineSegment.x ?x ;
        cim:ACLineSegment.bch ?bch ;
        cim:IdentifiedObject.name ?name .
    OPTIONAL {
        ?ACLineSegment cim:ACLineSegment.gch ?gch
    }
    ?Terminal1
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?ACLineSegment ;
        cim:ACDCTerminal.sequenceNumber ?sequenceNumber1 .
    ?Terminal2
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?ACLineSegment ;
        cim:ACDCTerminal.sequenceNumber ?sequenceNumber2 .
    FILTER ( ?sequenceNumber1 < ?sequenceNumber2 )
}}
}

# query: equivalentBranches
SELECT *
WHERE {
{ GRAPH ?graph {
    ?EquivalentBranch
        a cim:EquivalentBranch ;
        cim:IdentifiedObject.name ?name ;
        cim:EquivalentBranch.r ?r ;
        cim:EquivalentBranch.x ?x .
    OPTIONAL {
        ?EquivalentBranch
            cim:EquivalentBranch.r21 ?r21 ;
            cim:EquivalentBranch.x21 ?x21
    }
    ?Terminal1
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?EquivalentBranch ;
        cim:ACDCTerminal.sequenceNumber "1" .
    ?Terminal2
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?EquivalentBranch ;
        cim:ACDCTerminal.sequenceNumber "2" .
}}
}


# query: seriesCompensators
SELECT *
WHERE {
{ GRAPH ?graph {
    ?SeriesCompensator
        a cim:SeriesCompensator ;
        cim:SeriesCompensator.r ?r ;
        cim:SeriesCompensator.x ?x ;
        cim:IdentifiedObject.name ?name .
    ?Terminal1
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?SeriesCompensator .
    ?Terminal2
        a cim:Terminal ;
        cim:Terminal.ConductingEquipment ?SeriesCompensator .
    FILTER ( STR (?Terminal1) < STR (?Terminal2) )
}}
}


# query: transformers
SELECT *
{ GRAPH ?graph {
    ?PowerTransformer
        a cim:PowerTransformer ;
        cim:IdentifiedObject.name ?name .
}}

# query: transformerEnds
SELECT *
WHERE {
{ GRAPH ?graph {
    ?PowerTransformer
        a cim:PowerTransformer ;
        cim:IdentifiedObject.name ?name .
    OPTIONAL { ?PowerTransformer cim:Equipment.EquipmentContainer ?EquipmentContainer }
    ?TransformerEnd
        a cim:PowerTransformerEnd ;
        cim:PowerTransformerEnd.PowerTransformer ?PowerTransformer ;
        cim:PowerTransformerEnd.b ?b ;
        cim:PowerTransformerEnd.r ?r ;
        cim:PowerTransformerEnd.x ?x ;
        cim:PowerTransformerEnd.ratedU ?ratedU ;
        cim:TransformerEnd.endNumber ?endNumber ;
        cim:TransformerEnd.Terminal ?Terminal .
    OPTIONAL { ?TransformerEnd  cim:PowerTransformerEnd.connectionKind ?connectionKind }
    OPTIONAL { ?TransformerEnd  cim:PowerTransformerEnd.phaseAngleClock ?phaseAngleClock }
    OPTIONAL { ?TransformerEnd  cim:PowerTransformerEnd.g ?g }
    OPTIONAL { ?RatioTapChanger cim:RatioTapChanger.TransformerEnd ?TransformerEnd }
    OPTIONAL { ?PhaseTapChanger cim:PhaseTapChanger.TransformerEnd ?TransformerEnd }
}}
}

# query: ratioTapChangers
SELECT *
WHERE {
{ GRAPH ?graphEQ {
    ?RatioTapChanger
        a cim:RatioTapChanger ;
        cim:IdentifiedObject.name ?name ;
        cim:TapChanger.lowStep ?lowStep ;
        cim:TapChanger.highStep ?highStep ;
        cim:TapChanger.neutralStep ?neutralStep ;
        cim:TapChanger.normalStep ?normalStep ;
        cim:TapChanger.neutralU ?neutralU ;
        cim:RatioTapChanger.stepVoltageIncrement ?stepVoltageIncrement ;
        cim:TapChanger.ltcFlag ?ltcFlag ;
        cim:RatioTapChanger.TransformerEnd ?TransformerEnd .
    OPTIONAL {
        ?RatioTapChanger
             cim:TapChanger.TapChangerControl ?TapChangerControl ;
             # ??? FIXME what is the difference between tculControlMode and TapChangerControl RegulatingControl.mode ?
             cim:RatioTapChanger.tculControlMode ?tculControlMode
    }
    OPTIONAL {
    	?RatioTapChanger cim:RatioTapChanger.RatioTapChangerTable ?RatioTapChangerTable 
    }
}}
OPTIONAL { GRAPH ?graphSSH {
    # ??? FIXME Difference between TapChanger.controlEnabled and TapChangerControl.enabled ???
    # When controlEnabled is set to false there is no additional data
    ?RatioTapChanger
        cim:TapChanger.controlEnabled ?tapChangerControlEnabled ;
        cim:TapChanger.step ?step
}}
OPTIONAL { GRAPH ?graphSV {
    ?SvTapStep
        a cim:SvTapStep ;
        cim:SvTapStep.TapChanger ?RatioTapChanger ;
        cim:SvTapStep.position ?SVtapStep
}}
}

# query: ratioTapChangerTable
SELECT *
WHERE {
    ?RatioTapChangerTablePoint
        a cim:RatioTapChangerTablePoint ;
        cim:RatioTapChangerTablePoint.RatioTapChangerTable ?Table ;
        cim:TapChangerTablePoint.step ?step .
    FILTER regex(str(?Table), "{0}")
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.ratio ?ratio }
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.r ?r } 
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.x ?x } 
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.g ?g } 
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.b ?b }
}

# query: ratioTapChangerTablesPoints
SELECT *
WHERE {
    ?RatioTapChangerTablePoint
        a cim:RatioTapChangerTablePoint ;
        cim:RatioTapChangerTablePoint.RatioTapChangerTable ?RatioTapChangerTable ;
        cim:TapChangerTablePoint.step ?step .
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.ratio ?ratio }
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.r ?r } 
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.x ?x } 
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.g ?g } 
    OPTIONAL { ?RatioTapChangerTablePoint cim:TapChangerTablePoint.b ?b }
}

# query: phaseTapChangers
SELECT *
WHERE {
{ GRAPH ?graph {
    ?PhaseTapChanger
        a ?phaseTapChangerType ;
        cim:IdentifiedObject.name ?name ;
        cim:TapChanger.lowStep ?lowStep ;
        cim:TapChanger.highStep ?highStep ;
        cim:TapChanger.neutralStep ?neutralStep ;
        cim:TapChanger.normalStep ?normalStep ;
        cim:TapChanger.neutralU ?neutralU ;
        cim:TapChanger.ltcFlag ?ltcFlag ;
        cim:PhaseTapChanger.TransformerEnd ?TransformerEnd .
    ?TransformerEnd
        a cim:PowerTransformerEnd ;
        cim:PowerTransformerEnd.ratedU ?transformerWindingRatedU .
    OPTIONAL {
        ?PhaseTapChanger cim:PhaseTapChangerAsymmetrical.windingConnectionAngle ?windingConnectionAngle
    }
    OPTIONAL {
        ?PhaseTapChanger
            cim:PhaseTapChangerNonLinear.xMax ?xMax ;
            cim:PhaseTapChangerNonLinear.xMin ?xMin ;
            cim:PhaseTapChangerNonLinear.voltageStepIncrement ?voltageStepIncrement
    }
    OPTIONAL {
        ?PhaseTapChanger cim:PhaseTapChangerTabular.PhaseTapChangerTable ?PhaseTapChangerTable
    }
    OPTIONAL {
        ?PhaseTapChanger
            cim:TapChanger.TapChangerControl ?TapChangerControl
    }
}}
OPTIONAL { GRAPH ?graphSSH {
    # ??? FIXME Difference between TapChanger.controlEnabled and TapChangerControl.enabled ???
    # When controlEnabled is set to false there is no additional data
    ?PhaseTapChanger
        cim:TapChanger.controlEnabled ?tapChangerControlEnabled ;
        cim:TapChanger.step ?step
}}
OPTIONAL { GRAPH ?graphSV {
    ?SVTapStep
        a cim:SvTapStep ;
        cim:SvTapStep.TapChanger ?PhaseTapChanger ;
        cim:SvTapStep.position ?SVtapStep
}}
}

# query: phaseTapChangerTable
SELECT *
WHERE {
    ?PhaseTapChangerTablePoint
        a cim:PhaseTapChangerTablePoint ;
        cim:PhaseTapChangerTablePoint.PhaseTapChangerTable ?Table ;
        cim:PhaseTapChangerTablePoint.angle ?angle ;
        cim:TapChangerTablePoint.step ?step .
    FILTER regex(str(?Table), "{0}")
    OPTIONAL { ?PhaseTapChangerTablePoint cim:TapChangerTablePoint.ratio ?ratio }
    OPTIONAL { ?PhaseTapChangerTablePoint cim:TapChangerTablePoint.r ?r }
    OPTIONAL { ?PhaseTapChangerTablePoint cim:TapChangerTablePoint.x ?x }
    OPTIONAL { ?PhaseTapChangerTablePoint cim:TapChangerTablePoint.g ?g }
    OPTIONAL { ?PhaseTapChangerTablePoint cim:TapChangerTablePoint.b ?b }
}

# query: regulatingControls
SELECT *
WHERE {
{ GRAPH ?graph {
    {
        ?RegulatingControl a cim:RegulatingControl
    }
    UNION
    {
        ?RegulatingControl a cim:TapChangerControl
    }
    ?RegulatingControl
        cim:RegulatingControl.mode ?mode ;
        cim:RegulatingControl.Terminal ?Terminal .
        { GRAPH ?graphTP {
            ?Terminal
                cim:Terminal.TopologicalNode ?topologicalNode
        }}
}}
{ GRAPH ?graphSSH {
    ?RegulatingControl
        cim:RegulatingControl.enabled ?enabled ;
        cim:RegulatingControl.targetValue ?targetValue ;
        cim:RegulatingControl.targetValueUnitMultiplier ?targetValueUnitMultiplier ;
        cim:RegulatingControl.discrete ?discrete .
    OPTIONAL { ?RegulatingControl cim:RegulatingControl.targetDeadband ?targetDeadband }
}}
}

# query: energyConsumers
SELECT *
WHERE {
{ GRAPH ?graph {
    ?EnergyConsumer
        a ?type ;
        cim:IdentifiedObject.name ?name .
    VALUES ?type { cim:EnergyConsumer cim:ConformLoad cim:NonConformLoad }
    ?Terminal cim:Terminal.ConductingEquipment ?EnergyConsumer .
    OPTIONAL { ?EnergyConsumer cim:EnergyConsumer.pfixed ?pfixed }
    OPTIONAL { ?EnergyConsumer cim:EnergyConsumer.qfixed ?qfixed }
}}
{ GRAPH ?graphSSH {
    ?EnergyConsumer
        cim:EnergyConsumer.p ?p ;
        cim:EnergyConsumer.q ?q
}}
}

# query: energySources
SELECT *
WHERE {
{ GRAPH ?graph {
    ?EnergySource
        a cim:EnergySource ;
        cim:IdentifiedObject.name ?name .
    ?Terminal cim:Terminal.ConductingEquipment ?EnergySource
}}
{ GRAPH ?graphSSH {
    ?EnergySource
        cim:EnergySource.activePower ?p ;
        cim:EnergySource.reactivePower ?q
}}
}

# query: shuntCompensators
SELECT *
WHERE {
{ GRAPH ?graph {
    ?ShuntCompensator
        a ?type ;
        cim:IdentifiedObject.name ?name ;
        cim:ShuntCompensator.normalSections ?normalSections ;
        cim:ShuntCompensator.maximumSections ?maximumSections ;
        cim:ShuntCompensator.nomU ?nomU .
    VALUES ?type { cim:LinearShuntCompensator cim:NonlinearShuntCompensator } .
    ?Terminal cim:Terminal.ConductingEquipment ?ShuntCompensator .
    OPTIONAL { ?ShuntCompensator cim:LinearShuntCompensator.gPerSection ?gPerSection }
    OPTIONAL { ?ShuntCompensator cim:LinearShuntCompensator.bPerSection ?bPerSection } 
    OPTIONAL { ?ShuntCompensator cim:RegulatingCondEq.RegulatingControl ?RegulatingControl }
}}
OPTIONAL { GRAPH ?graphSV  {
    ?SvShuntCompensatorSections
        a cim:SvShuntCompensatorSections ;
        cim:SvShuntCompensatorSections.ShuntCompensator ?ShuntCompensator ;
        cim:SvShuntCompensatorSections.sections ?SVsections
}}
OPTIONAL { GRAPH ?graphSSH  {
    ?ShuntCompensator cim:ShuntCompensator.sections ?SSHsections
}}
}

# query: nonlinearShuntCompensatorPoints
SELECT *
WHERE {
    ?NonlinearShuntCompensatorPoint
        a cim:NonlinearShuntCompensatorPoint ;
        cim:NonlinearShuntCompensatorPoint.NonlinearShuntCompensator ?Shunt ;
        cim:NonlinearShuntCompensatorPoint.sectionNumber ?sectionNumber ;
        cim:NonlinearShuntCompensatorPoint.b ?b ;
        cim:NonlinearShuntCompensatorPoint.g ?g  .
    FILTER REGEX ( STR (?Shunt), "{0}")
}

# query: synchronousMachines
SELECT *
WHERE {
{ GRAPH ?graph {
    ?SynchronousMachine
        a cim:SynchronousMachine ;
        cim:RotatingMachine.GeneratingUnit ?GeneratingUnit .
    OPTIONAL {
    	?SynchronousMachine cim:RotatingMachine.ratedS ?ratedS
   	}
    ?GeneratingUnit
        a ?generatingUnitType ;
        cim:GeneratingUnit.minOperatingP ?minP ;
        cim:GeneratingUnit.maxOperatingP ?maxP ;
        cim:GeneratingUnit.initialP ?initialP ;
        cim:IdentifiedObject.name ?name .
    ?Terminal cim:Terminal.ConductingEquipment ?SynchronousMachine .
    OPTIONAL { ?SynchronousMachine cim:SynchronousMachine.minQ ?minQ }
    OPTIONAL { ?SynchronousMachine cim:SynchronousMachine.maxQ ?maxQ }
    OPTIONAL { ?SynchronousMachine cim:SynchronousMachine.InitialReactiveCapabilityCurve ?ReactiveCapabilityCurve }
    OPTIONAL { ?SynchronousMachine cim:RegulatingCondEq.RegulatingControl ?RegulatingControl }
    OPTIONAL { ?SynchronousMachine cim:SynchronousMachine.qPercent ?qPercent }
    OPTIONAL { GRAPH ?graphSSH3 {
    	?SynchronousMachine 
    		cim:RotatingMachine.p ?p ;
    		cim:RotatingMachine.q ?q 
    }}
}}
}

# query: equivalentInjections
SELECT *
WHERE {
{ GRAPH ?graph {
    ?EquivalentInjection
        a cim:EquivalentInjection ;
        cim:IdentifiedObject.name ?name .
    ?Terminal cim:Terminal.ConductingEquipment ?EquivalentInjection .
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.minP ?minP }
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.maxP ?maxP }
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.minQ ?minQ }
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.maxQ ?maxQ }
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.regulationCapability ?regulationCapability }
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.ReactiveCapabilityCurve ?ReactiveCapabilityCurve }
}}
OPTIONAL { GRAPH ?graphSSH  {
    ?EquivalentInjection
        cim:EquivalentInjection.p ?p ;
        cim:EquivalentInjection.q ?q .
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.regulationStatus ?regulationStatus }
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.regulationTarget ?regulationTarget }
}}
}

# query: equivalentShunts
SELECT *
WHERE {
{ GRAPH ?graph {
    ?EquivalentShunt
        a cim:EquivalentShunt ;
        cim:IdentifiedObject.name ?name ;
        cim:EquivalentShunt.b ?b ;
        cim:EquivalentShunt.g ?g .
    ?Terminal cim:Terminal.ConductingEquipment ?EquivalentShunt .
}}
}

# query: svInjections
SELECT *
WHERE {
{ GRAPH ?graph {
    ?SvInjection
        a cim:SvInjection ;
        cim:SvInjection.TopologicalNode ?TopologicalNode ;
        cim:SvInjection.pInjection ?pInjection .
        OPTIONAL { ?SvInjection cim:SvInjection.qInjection ?qInjection }
}}
}

# query: reactiveCapabilityCurveData
SELECT *
WHERE {
    ?CurveData
        a cim:CurveData ;
        cim:CurveData.Curve ?ReactiveCapabilityCurve ;
        cim:CurveData.xvalue ?xvalue ;
        cim:CurveData.y1value ?y1value .
    OPTIONAL { ?CurveData cim:CurveData.y2value ?y2value }
}

# query: externalNetworkInjections
SELECT *
WHERE {
{ GRAPH ?graph {
    ?ExternalNetworkInjection
        a cim:ExternalNetworkInjection ;
        cim:IdentifiedObject.name ?name ;
        cim:ExternalNetworkInjection.minP ?minP ;
        cim:ExternalNetworkInjection.maxP ?maxP .
    ?Terminal cim:Terminal.ConductingEquipment ?ExternalNetworkInjection
    OPTIONAL { ?ExternalNetworkInjection cim:ExternalNetworkInjection.minQ ?minQ }
    OPTIONAL { ?ExternalNetworkInjection cim:ExternalNetworkInjection.maxQ ?maxQ }
    OPTIONAL { ?ExternalNetworkInjection cim:RegulatingCondEq.RegulatingControl ?RegulatingControl }
}}
OPTIONAL { GRAPH ?graphSSH3  {
    ?ExternalNetworkInjection
        cim:ExternalNetworkInjection.p ?p ;
        cim:ExternalNetworkInjection.q ?q
}}
}

# query: staticVarCompensators
SELECT *
WHERE {
{ GRAPH ?graph {
    ?StaticVarCompensator
        a cim:StaticVarCompensator ;
        cim:IdentifiedObject.name ?name ;
        cim:StaticVarCompensator.capacitiveRating ?capacitiveRating ;
        cim:StaticVarCompensator.inductiveRating ?inductiveRating ;
        cim:StaticVarCompensator.slope ?slope ;
        cim:StaticVarCompensator.sVCControlMode ?controlMode ;
        cim:StaticVarCompensator.voltageSetPoint ?voltageSetPoint .
    ?Terminal cim:Terminal.ConductingEquipment ?StaticVarCompensator .
    OPTIONAL {
        ?StaticVarCompensator cim:RegulatingCondEq.RegulatingControl ?RegulatingControl
    }
}}
{ GRAPH ?graphSSH  {
    ?StaticVarCompensator
        cim:StaticVarCompensator.q ?q ;
        cim:RegulatingCondEq.controlEnabled ?controlEnabled
}}
}

# query: asynchronousMachines
SELECT *
WHERE {
{ GRAPH ?graph {
    ?AsynchronousMachine
        a cim:AsynchronousMachine ;
        cim:IdentifiedObject.name ?name .
    ?Terminal cim:Terminal.ConductingEquipment ?AsynchronousMachine .
}}
OPTIONAL { GRAPH ?graphSSH  {
    ?AsynchronousMachine
        cim:AsynchronousMachine.asynchronousMachineType ?type ;
        cim:RotatingMachine.p ?p ;
        cim:RotatingMachine.q ?q ;
        cim:RegulatingCondEq.controlEnabled ?controlEnabled
}}
}

# query: acDcConverters
SELECT *
WHERE {
{ GRAPH ?graph {
    ?ACDCConverter
        a ?type ;
        cim:IdentifiedObject.name ?name ;
        cim:ACDCConverter.ratedUdc ?ratedUdc .
    ?Terminal cim:Terminal.ConductingEquipment ?ACDCConverter .
    # ?DCTerminal cim:ACDCConverterDCTerminal.DCConductingEquipment ?ACDCConverter .
    VALUES ?type { cim:ACDCConverter cim:CsConverter cim:VsConverter }
}}
{ GRAPH ?graphSSH {
    ?ACDCConverter
        cim:ACDCConverter.targetPpcc ?targetPpcc ;
        cim:ACDCConverter.p ?p ;
        cim:ACDCConverter.q ?q .
}}
{ GRAPH ?graphSV {
    ?ACDCConverter cim:ACDCConverter.poleLossP ?poleLossP
}}
# For Current Source Converter
OPTIONAL {
	?ACDCConverter a cim:CsConverter .
   	?ACDCConverter
       	cim:CsConverter.operatingMode ?operatingMode ;
       	cim:CsConverter.pPccControl ?controlMode .
   	OPTIONAL { ?ACDCConverter cim:ACDCConverter.targetUdc ?targetUdc }
}
# For Voltage Source Converter
OPTIONAL {
	?ACDCConverter a cim:VsConverter .
   	?ACDCConverter
       	cim:VsConverter.qPccControl ?qPccControl ;
       	cim:VsConverter.pPccControl ?pPccControl .
   	OPTIONAL { ?ACDCConverter cim:VsConverter.targetQpcc ?targetQpcc }
   	OPTIONAL { ?ACDCConverter cim:VsConverter.targetUpcc ?targetUpcc }
}
}

# query: dcTerminals
SELECT *
WHERE {
{
{ GRAPH ?graph {
    ?DCTerminal
        a cim:DCTerminal ;
        cim:DCTerminal.DCConductingEquipment ?DCConductingEquipment .
    ?DCConductingEquipment a ?dcConductingEquipmentType .
}}
UNION
{ GRAPH ?graphACDC {
    ?DCTerminal
        a cim:ACDCConverterDCTerminal ;
        cim:ACDCConverterDCTerminal.DCConductingEquipment ?DCConductingEquipment .
    ?DCConductingEquipment a ?dcConductingEquipmentType .
}}
}
OPTIONAL { GRAPH ?graphSSH {
    ?DCTerminal cim:ACDCTerminal.connected ?connected
}}
}

# query: dcTerminalsTP
SELECT *
WHERE {
{ GRAPH ?graphTP {
    ?DCTerminal cim:DCBaseTerminal.DCTopologicalNode ?DCTopologicalNode
}}
OPTIONAL {
    { GRAPH ?graphTP2 {
        ?DCTopologicalNode cim:DCTopologicalNode.DCEquipmentContainer ?EquipmentContainer
    }}
    OPTIONAL { GRAPH ?graph3 {
        ?EquipmentContainer
            a cim:DCConverterUnit ;
            cim:DCConverterUnit.Substation ?Substation .
    }}
}
}

# query: dcLineSegments
SELECT *
WHERE {
{ GRAPH ?graph {
    ?DCLineSegment
        a cim:DCLineSegment ;
        cim:IdentifiedObject.name ?name .
    OPTIONAL { ?DCLineSegment cim:DCLineSegment.resistance ?r }
    OPTIONAL { ?DCLineSegment cim:DCLineSegment.inductance ?l }
    OPTIONAL { ?DCLineSegment cim:DCLineSegment.capacitance ?c }
    OPTIONAL { ?DCLineSegment cim:DCLineSegment.length ?length }
    ?DCTerminal1
        a cim:DCTerminal ;
        cim:DCTerminal.DCConductingEquipment ?DCLineSegment ;
        cim:ACDCTerminal.sequenceNumber "1" .
    ?DCTerminal2
        a cim:DCTerminal ;
        cim:DCTerminal.DCConductingEquipment ?DCLineSegment ;
        cim:ACDCTerminal.sequenceNumber "2" .
}}
}

# query: update
DELETE { GRAPH <{0}>
    { ?subject ?predicate ?value }
    }
INSERT { GRAPH <{0}>
    { ?subjectIn {2} ?valueIn }
    }
WHERE {     
{ GRAPH <{0}>
    { ?subject  ?predicate  ?value .
      FILTER ( (?subject = <{1}>) && (?predicate = IRI({2})) )
    }
}
UNION
{ GRAPH <{0}>
    {     
      BIND ( "{3}" AS ?object ) 
      BIND ( IF ( "{4}"="true", IRI(?object), ?object) AS ?valueIn ) .
      BIND ( IF ( BOUND (?subject), ?subject, IRI(<{1}>)) AS ?subjectIn ) .
    }
}
}

# query: create
INSERT { GRAPH <{0}> 
    { ?subject  {2} ?value .}
    }
WHERE {
    SELECT ?subject ?value
    WHERE { GRAPH <{0}> {
      BIND ( "{3}" AS ?object) 
      BIND ( IF ("{4}"="true", IRI(?object), ?object) AS ?value) .
      BIND ( IRI(<{1}>) AS ?subject ).
    }
}
}

# query: remove

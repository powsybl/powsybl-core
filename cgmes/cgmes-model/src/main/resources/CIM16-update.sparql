#
# Copyright (c) 2024, RTE (http://www.rte-france.com)
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
# SPDX-License-Identifier: MPL-2.0
#

# query: numObjectsByType
# Only types in a namespace given as parameter
SELECT ?Type (COUNT (DISTINCT ?object) AS ?numObjects)
{ GRAPH ?graph {
     ?object a ?Type .
    FILTER (STRSTARTS(STR(?Type), "{0}"))
}}
GROUP BY ?Type

# query: allObjectsOfType
SELECT *
{ GRAPH ?graph {
     ?object a cim:{0} ;
     ?attribute ?value .
}}

# query: terminals
# FIXME(Luma) we do not have here the conducting equipment for the terminal
# we cannot access the 'inService' Status
SELECT *
{
    ?Terminal a cim:Terminal
    # FIXME(Luma) if we do not have data about the terminal we should not return a row
    # We must have either a connected attribute or a SvPowerFlow
    OPTIONAL {
        ?Terminal cim:ACDCTerminal.connected ?connected
    }
    OPTIONAL {
        ?SvPowerFlow a cim:SvPowerFlow ;
            cim:SvPowerFlow.Terminal ?Terminal ;
            cim:SvPowerFlow.p ?p ;
            cim:SvPowerFlow.q ?q .
    }
}

# query: topologicalIslands
SELECT *
{
    ?TopologicalIsland a cim:TopologicalIsland ;
        cim:IdentifiedObject.name ?name ;
        cim:TopologicalIsland.AngleRefTopologicalNode ?AngleRefTopologicalNode ;
        cim:TopologicalIsland.TopologicalNodes ?TopologicalNodes .
}

# query: operationalLimits
SELECT *
{
    ?OperationalLimit a ?type ;
        VALUES ?type { cim:CurrentLimit cim:ApparentPowerLimit cim:ActivePowerLimit cim:VoltageLimit } .
        OPTIONAL { ?OperationalLimit cim:CurrentLimit.value ?value }
        OPTIONAL { ?OperationalLimit cim:ApparentPowerLimit.value ?value }
        OPTIONAL { ?OperationalLimit cim:ActivePowerLimit.value ?value }
        OPTIONAL { ?OperationalLimit cim:VoltageLimit.value ?value }
}

# query: topologicalNodes
SELECT *
{
    ?TopologicalNode a cim:TopologicalNode .
    OPTIONAL {
        ?SvVoltage a cim:SvVoltage ;
            cim:SvVoltage.TopologicalNode ?TopologicalNode ;
            cim:SvVoltage.v ?v ;
            cim:SvVoltage.angle ?angle
    }
    OPTIONAL {
        ?ConnectivityNode cim:ConnectivityNode.TopologicalNode ?TopologicalNode
    }
}

# query: switches
SELECT *
{
    ?Switch a ?type ;
        cim:Switch.open ?open .
    VALUES ?type { cim:Switch cim:Breaker cim:Disconnector cim:LoadBreakSwitch cim:ProtectedSwitch cim:GroundDisconnector }
}

# query: ratioTapChangers
SELECT *
{
    ?RatioTapChanger a cim:RatioTapChanger ;
    # FIXME(Luma) return either data from SSH or from SV, but at least some data has to be present to return a row
    OPTIONAL {
        ?RatioTapChanger
            cim:TapChanger.controlEnabled ?tapChangerControlEnabled ;
            cim:TapChanger.step ?step
    }
    OPTIONAL {
        ?SvTapStep a cim:SvTapStep ;
            cim:SvTapStep.TapChanger ?RatioTapChanger ;
            cim:SvTapStep.position ?SVtapStep
    }
}

# query: phaseTapChangers
SELECT *
{
    ?PhaseTapChanger a ?phaseTapChangerType ;
    VALUES ?phaseTapChangerType { cim:PhaseTapChangerLinear cim:PhaseTapChangerAsymmetrical cim:PhaseTapChangerNonLinear cim:PhaseTapChangerTabular } .
    OPTIONAL {
        ?PhaseTapChanger
            cim:TapChanger.controlEnabled ?tapChangerControlEnabled ;
            cim:TapChanger.step ?step
    }
    OPTIONAL {
        ?SVTapStep a cim:SvTapStep ;
            cim:SvTapStep.TapChanger ?PhaseTapChanger ;
            cim:SvTapStep.position ?SVtapStep
    }
}

# query: regulatingControls
SELECT *
{
    {
        ?RegulatingControl a cim:RegulatingControl
    }
    UNION
    {
        ?RegulatingControl a cim:TapChangerControl
    }
    OPTIONAL {
        ?RegulatingControl
            cim:RegulatingControl.enabled ?enabled ;
            cim:RegulatingControl.targetValue ?targetValue ;
            cim:RegulatingControl.targetValueUnitMultiplier ?targetValueUnitMultiplier ;
            cim:RegulatingControl.discrete ?discrete .
        OPTIONAL { ?RegulatingControl cim:RegulatingControl.targetDeadband ?targetDeadband }
    }
}

# query: energyConsumers
SELECT *
{
    ?EnergyConsumer a ?type ;
            cim:EnergyConsumer.p ?p ;
            cim:EnergyConsumer.q ?q .
    VALUES ?type { cim:EnergyConsumer cim:ConformLoad cim:NonConformLoad cim:StationSupply }
}

# query: energySources
SELECT *
{
    ?EnergySource a cim:EnergySource ;
            cim:EnergySource.activePower ?p ;
            cim:EnergySource.reactivePower ?q
}

# query: shuntCompensators
SELECT *
{
    {
        ?ShuntCompensator a ?type ;
        VALUES ?type { cim:LinearShuntCompensator cim:NonlinearShuntCompensator } .
    }
    OPTIONAL {
        ?ShuntCompensator
            cim:ShuntCompensator.sections ?SSHsections ;
            cim:RegulatingCondEq.controlEnabled ?controlEnabled
    }
    OPTIONAL {
        ?SvShuntCompensatorSections
            a cim:SvShuntCompensatorSections ;
            cim:SvShuntCompensatorSections.ShuntCompensator ?ShuntCompensator ;
            cim:SvShuntCompensatorSections.sections ?SVsections
    }
}

# FIXME(Luma) we do not have access to the type when reading update only files,
# we cannot differentiate between generators and condensers
# this means that we may not deprecate synchronousMachines in the end,
# or we could make the new query "allSynchronousMachines"

# query: allSynchronousMachines
SELECT *
{
    ?SynchronousMachine a cim:SynchronousMachine
    # FIXME(Luma) p in a separate optional block because condersers could not define it
    OPTIONAL { ?SynchronousMachine cim:RotatingMachine.p ?p }
    OPTIONAL {
        ?SynchronousMachine
            cim:RotatingMachine.q ?q ;
            cim:SynchronousMachine.referencePriority ?referencePriority ;
            cim:SynchronousMachine.operatingMode ?operatingMode ;
            cim:RegulatingCondEq.controlEnabled ?controlEnabled .
        # For condensers givin p is optional,
    }
}

# query: generatingUnits
SELECT *
{
    ?GeneratingUnit
        a ?generatingUnitType ;
        cim:GeneratingUnit.normalPF ?normalPF
}

# query: equivalentInjections
SELECT *
{
    ?EquivalentInjection a cim:EquivalentInjection ;
        cim:EquivalentInjection.p ?p ;
        cim:EquivalentInjection.q ?q .
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.regulationStatus ?regulationStatus }
    OPTIONAL { ?EquivalentInjection cim:EquivalentInjection.regulationTarget ?regulationTarget }
}

# query: svInjections
SELECT ?SvInjection ?TopologicalNode ?pInjection ?qInjection (MIN(?ConnectivityNode) AS ?ConnectivityNode)
{
    ?SvInjection a cim:SvInjection ;
        cim:SvInjection.TopologicalNode ?TopologicalNode ;
        cim:SvInjection.pInjection ?pInjection .
    OPTIONAL { ?SvInjection cim:SvInjection.qInjection ?qInjection }
    OPTIONAL { ?ConnectivityNode cim:ConnectivityNode.TopologicalNode ?TopologicalNode }
}GROUP BY ?SvInjection ?TopologicalNode ?pInjection ?qInjection

# query: externalNetworkInjections
SELECT *
{
    ?ExternalNetworkInjection  a cim:ExternalNetworkInjection ;
        cim:ExternalNetworkInjection.p ?p ;
        cim:ExternalNetworkInjection.q ?q ;
        cim:RegulatingCondEq.controlEnabled ?controlEnabled
}

# query: staticVarCompensators
SELECT *
{
    ?StaticVarCompensator a cim:StaticVarCompensator ;
        cim:StaticVarCompensator.q ?q ;
        cim:RegulatingCondEq.controlEnabled ?controlEnabled
}

# query: asynchronousMachines
SELECT *
{
    ?AsynchronousMachine a cim:AsynchronousMachine ;
        cim:AsynchronousMachine.asynchronousMachineType ?type ;
        cim:RotatingMachine.p ?p ;
        cim:RotatingMachine.q ?q ;
        cim:RegulatingCondEq.controlEnabled ?controlEnabled
}

# query: controlAreas
SELECT *
{
    ?ControlArea a cim:ControlArea ;
        cim:ControlArea.netInterchange ?netInterchange .
    OPTIONAL { ?ControlArea cim:ControlArea.pTolerance ?pTolerance }
}

# query: acDcConverters
SELECT *
{
    ?ACDCConverter a ?type .
    VALUES ?type { cim:ACDCConverter cim:CsConverter cim:VsConverter }
    ?ACDCConverter
        cim:ACDCConverter.targetPpcc ?targetPpcc ;
        cim:ACDCConverter.p ?p ;
        cim:ACDCConverter.q ?q .
    # From SV, for all converters
    OPTIONAL {
        ?ACDCConverter cim:ACDCConverter.poleLossP ?poleLossP
    }
    # For Current Source Converter
    OPTIONAL {
        ?ACDCConverter a cim:CsConverter ;
            cim:CsConverter.operatingMode ?operatingMode ;
            cim:CsConverter.pPccControl ?controlMode .
        OPTIONAL { ?ACDCConverter cim:ACDCConverter.targetUdc ?targetUdc }
    }
    # For Voltage Source Converter
    OPTIONAL {
        ?ACDCConverter a cim:VsConverter ;
           cim:VsConverter.qPccControl ?qPccControl ;
           cim:VsConverter.pPccControl ?pPccControl .
        OPTIONAL { ?ACDCConverter cim:VsConverter.targetQpcc ?targetQpcc }
        OPTIONAL { ?ACDCConverter cim:VsConverter.targetUpcc ?targetUpcc }
    }
}

# query: dcTerminals
SELECT *
{
    ?DCTerminal a cim:DCTerminal ;
        cim:ACDCTerminal.connected ?connected
    OPTIONAL {
        ?DCTerminal cim:DCBaseTerminal.DCTopologicalNode ?DCTopologicalNode .
    }
}

/**
 * Copyright (c) 2019, RTE (http://www.rte-france.com)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package com.powsybl.iidm.network.impl.util;

import com.powsybl.commons.test.AbstractConverterTest;
import com.powsybl.iidm.network.Network;
import com.powsybl.iidm.network.test.EurostagTutorialExample1Factory;
import com.powsybl.iidm.network.util.GraphvizConnectivity;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Random;
import java.util.Set;
import java.util.stream.Collectors;

import static org.junit.Assert.assertEquals;

/**
 *
 * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>
 */
public class GraphvizConnectivityTest extends AbstractConverterTest {

    @Test
    public void test() throws IOException, NoSuchAlgorithmException {
        Network network = EurostagTutorialExample1Factory.create();
        try (StringWriter writer = new StringWriter()) {
            new GraphvizConnectivity(network, new Random(0)).write(writer);
            writer.flush();
            compareDotStrings(writer.toString(), "/eurostag-tutorial-example1.dot");
        }
    }

    @Test
    public void testCountryCluster() throws IOException {
        Network network = EurostagTutorialExample1Factory.createWithFixedCurrentLimits();
        try (StringWriter writer = new StringWriter()) {
            new GraphvizConnectivity(network, new Random(0)).setCountryCluster(true).write(writer);
            writer.flush();
            compareDotStrings(writer.toString(), "/eurostag-tutorial-country-cluster.dot");
        }
    }

    private void compareDotStrings(String dotString, String refFile) {
        String ref = new BufferedReader(new InputStreamReader(getClass().getResourceAsStream(refFile))).lines()
            .collect(Collectors.joining("\n"));
        // as Graphviz builder library does not have a stable export (order of nodes and edges can change at each run)
        // we only compare unsorted lines
        Set<Set<String>> linesRef = splitLines(ref);
        Set<Set<String>> lines = splitLines(dotString);
        assertEquals(linesRef, lines);
    }

    private Set<Set<String>> splitLines(String ref) {
        // we first split by subcomponents, based on new lines & tabs
        // then split in subcomponents, based on new lines, filtering out at the same time the commented scope lines
        // as their id is not stable (generated by a call to System.identityHashCode())
        return Arrays.stream(ref.split("[\\r\\n]+(?!((\\t\\t)|(\\t})))"))
            .map(s -> Arrays.stream(s.split("[\\r\\n]+\\t")).filter(s1 -> !s1.startsWith("\t// scope=")).collect(Collectors.toSet()))
            .collect(Collectors.toSet());
    }
}

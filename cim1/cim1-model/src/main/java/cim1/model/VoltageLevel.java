/**
 * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package cim1.model;

import cim1.exc.InterpretationException;
import cim1.exc.LinkageException;
import java.util.BitSet;
import java.util.Map;
import java.util.EnumMap;
import javax.xml.stream.XMLStreamException;
import cim1.CIMURI;
import javax.xml.stream.XMLStreamWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * This file has been automatically generated by CIMGateway
 *
 * Description :
 *
 * This class "VoltageLevel.java" represents the
 * class VoltageLevel extends EquipmentContainer
 *    + BaseVoltage   1..1   BaseVoltage
 *    + MemberOf_Substation   1..1   Substation

 */
public class VoltageLevel extends EquipmentContainer {

    private static Logger LOGGER = LoggerFactory.getLogger(VoltageLevel.class);

    /**
     * Attribute "baseVoltage"
     *
     * Comment from profile:
     * The base voltage used for all equipment within the VoltageLevel.
     */
    public BaseVoltage baseVoltage;

    /**
     * The id of the attribute "baseVoltage"
     * This id is mainly used to resolve links after parsing an instance
     */

    public String idBaseVoltage;

    /**
     * Attribute "memberOf_Substation"
     *
     * Comment from profile:
     * The association is used in the naming hierarchy.
     */
    public Substation memberOfSubstation;

    /**
     * The id of the attribute "memberOf_Substation"
     * This id is mainly used to resolve links after parsing an instance
     */

    public String idMemberOfSubstation;

    /**
     * The current bitset describing the state of each CIM attribute of this
     * class
     */
    private BitSet currentBitset = new BitSet();

   /**
    * The bitset describing which CIM attributes of this class have to set to
    * be consistent within a "merged" context
    */
    private final BitSet minBitset = new BitSet();

   /**
    * The Map of subset<=>bitset describing which CIM attributes of this class
    * have to set to be consistent within a specific subset context
    */
    private final Map<Subset, BitSet> minBitsets
            = new EnumMap<Subset, BitSet>(Subset.class);


    /**
     * Utility to return the "baseVoltage"
     *
     * @return the value of the attribute "baseVoltage"
     */
    public BaseVoltage getBaseVoltage() {
        return this.baseVoltage;
    }

    /**
     * Utility to test if the value of "baseVoltage" has been set
     *
     * @return boolean
     *            if true the attribute "baseVoltage" is already set
     *            if false it isn't yet
     */
    public boolean baseVoltageIsSet() {
        return this.currentBitset.get(0);
    }

    /**
     * Utility to set the "baseVoltageValue"
     *
     * @param baseVoltageValue
     *            instance to set
     * @param setInverse
     *            boolean to specify whether to set the inverse association
     *            or not
     * @throws LinkageException
     */
    public void setBaseVoltage(
            BaseVoltage baseVoltageValue,
            boolean setInverse) throws LinkageException {
        this.baseVoltage = baseVoltageValue;
        this.currentBitset.set(0);
        if (setInverse) {

            if (baseVoltageValue != null) {
                baseVoltageValue.addVoltageLevel(this, false);
            }
        }
    }

    /**
     * Utility to return the "memberOf_Substation"
     *
     * @return the value of the attribute "memberOf_Substation"
     */
    public Substation getMemberOfSubstation() {
        return this.memberOfSubstation;
    }

    /**
     * Utility to test if the value of "memberOf_Substation" has been set
     *
     * @return boolean
     *            if true the attribute "memberOf_Substation" is already set
     *            if false it isn't yet
     */
    public boolean memberOfSubstationIsSet() {
        return this.currentBitset.get(1);
    }

    /**
     * Utility to set the "memberOf_SubstationValue"
     *
     * @param memberOfSubstationValue
     *            instance to set
     * @param setInverse
     *            boolean to specify whether to set the inverse association
     *            or not
     * @throws LinkageException
     */
    public void setMemberOfSubstation(
            Substation memberOfSubstationValue,
            boolean setInverse) throws LinkageException {
        this.memberOfSubstation = memberOfSubstationValue;
        this.currentBitset.set(1);
        if (setInverse) {

            if (memberOfSubstationValue != null) {
                memberOfSubstationValue.addContains_VoltageLevels(this, false);
            }
        }
    }


    /**
     * Factory of the class
     *
     * @param id
     *            id of the class VoltageLevel to create
     * @return the class created
     */
    public static VoltageLevel create(final String id) {
        VoltageLevel newVoltageLevel = new VoltageLevel();
        newVoltageLevel.setId(id);
        return newVoltageLevel;
    }

    /**
     * Utility to "clear" the content of a class when a subset is invalidated
     *
     * @param subset subset to clean
     */
    @Override
    public void clearContent(Subset subset) {

        // First of all, we clear the associations:
        this.clearAssociations(subset);

        switch (subset) {
            default: // nothing to clear
        }
    }

    /**
     * Utility to read an attribute
     * This function is called by the CIMModel
     *
     * @param className
     *            the read name of class
     * @param attrName
     *            the read name of attribute
     * @param value
     *            the read value of the attribute
     * @param model
     *            the interface to the model this class belongs to
     * @throws InterpretationException
     */
    @Override
    public void readAttribute(final String className, final String attrName,
                              final String value, CIMModel model) throws InterpretationException {

        if (className.equals("VoltageLevel")) {
            StringBuilder errorMessage = new StringBuilder("The attribute \"");
            errorMessage.append(attrName);
            errorMessage.append("\" in class \"");
            errorMessage.append(className);
            errorMessage.append("\" could not be found in the model !");
            throw new InterpretationException(errorMessage.toString());
        } else {
                // We do not check if we are in the proper subset
                // to call the function on
                // the parent class
            super.readAttribute(className, attrName, value, model);

        }
    }

    /**
     * Utility to read a reference to a resource
     * This function is called by the CIMModel
     *
     * @param className
     *            the read name of class
     * @param resourceName
     *            the read name of the associated resource
     * @param id
     *            the id of the associated resource
     * @param model
     *            the model this class belongs to
     * @throws InterpretationException
     */
    @Override
    public void readResource(final String className,
            final String resourceName, final String id, CIMModel model)
            throws InterpretationException, LinkageException {
        if (className.equals("VoltageLevel")) {

            if (resourceName.equals("BaseVoltage")) {

                if (!(model.isCurrentSubsetSet())
                        || (model.getCurrentSubset() == Subset.Equipment)) {
                    idBaseVoltage = id.substring(1);
                    if (!super.isAddedToUnresolved()) {
                        model.addUnresolved();
                        super.addToUnresolved();
                    }

                    return;
                } else {
                    StringBuilder errorMessage
                            = new StringBuilder("The association \"");
                    errorMessage.append(resourceName);
                    errorMessage.append("\" in class");
                    errorMessage.append("\"" + className + " \"");
                    errorMessage.append("is not supposed to be in the subset \"");
                    errorMessage.append(model.getCurrentSubset().getIdentifier());
                    errorMessage.append("\"");
                    throw new InterpretationException(errorMessage.toString());
                }
            }


            if (resourceName.equals("MemberOf_Substation")) {

                if (!(model.isCurrentSubsetSet())
                        || (model.getCurrentSubset() == Subset.Equipment)) {
                    idMemberOfSubstation = id.substring(1);
                    if (!super.isAddedToUnresolved()) {
                        model.addUnresolved();
                        super.addToUnresolved();
                    }

                    return;
                } else {
                    StringBuilder errorMessage
                            = new StringBuilder("The association \"");
                    errorMessage.append(resourceName);
                    errorMessage.append("\" in class");
                    errorMessage.append("\"" + className + " \"");
                    errorMessage.append("is not supposed to be in the subset \"");
                    errorMessage.append(model.getCurrentSubset().getIdentifier());
                    errorMessage.append("\"");
                    throw new InterpretationException(errorMessage.toString());
                }
            }


            StringBuilder errorMessage = new StringBuilder("The association \"");
            errorMessage.append(resourceName);
            errorMessage.append("\" in class \"");
            errorMessage.append(className);
            errorMessage.append("\" could not be found in the model !");
            throw new InterpretationException(errorMessage.toString());
        } else {
            super.readResource(className, resourceName, id, model);
        }
    }

    /**
     * Utility to write the content into the CIM XML format
     *
     * @param writeID
     *            specifies whether to write the XML "id" attribute (this is used for describing concrete class)
     * @param xmlsw
     *            XMLStreamWriter where are stored the elements to write
     */
    @Override
    public void write(XMLStreamWriter xmlsw, boolean writeID) {

        /*
         * In previous versions, we used to check the consistency
         * of the instance in the context but this task is now
         * performed by the model before attempting to write.
         * Therefore each instance can now be written even if
         * it is not consistent !
         */

        if (writeID) {

            try {
                xmlsw.writeStartElement(CIMURI.CIMURI, "VoltageLevel");
                xmlsw.writeAttribute(CIMModel.rdfURI, "ID", getId());
                // xmlsw.writeCharacters("\n");
            } catch (XMLStreamException e) {
                StringBuilder errorMessage = new StringBuilder(
                        "Error while trying to write the class ");
                errorMessage.append("VoltageLevel ");
                errorMessage.append("which ID has been initialized to : ");
                errorMessage.append(getId());
                LOGGER.error(errorMessage.toString());
                LOGGER.error(e.toString(), e);
            }
        }
        writeClass(xmlsw);
        super.write(xmlsw, false);

        if (writeID) {
            try {
                xmlsw.writeEndElement();
                // xmlsw.writeCharacters("\n");
            } catch (XMLStreamException e) {
                StringBuilder errorMessage = new StringBuilder(
                        "Error while trying to write the end Element of the class ");
                errorMessage.append("VoltageLevel ");
                errorMessage.append("which ID has been initialized to : ");
                errorMessage.append(getId());
                LOGGER.error(errorMessage.toString());
                LOGGER.error(e.toString(), e);
            }
        }

        return;
    }

    /**
     * Utility to write the content this class into the CIM/XML format according
     * to a subset
     *
     * @param subset
     *            the subset defining the context in which to write this class
     * @param writeID
     *            specifies whether to write the XML "id" attribute (this is used for describing concrete class)
     * @param xmlsw
     *            the stream in which are stored the elements to write
     */
    @Override
    public void write(XMLStreamWriter xmlsw, final Subset subset,
            boolean writeID) {

        /*
         * In previous versions, we used to check the consistency
         * of the instance in the context but this task is now
         * performed by the model before attempting to write.
         * Therefore each instance can now be written even if
         * it is not consistent !
         */

        switch (subset) {
            case Equipment: {

                if (writeID) {
                    try {
                        xmlsw.writeStartElement(CIMURI.CIMURI, "VoltageLevel");
                        xmlsw.writeAttribute(CIMModel.rdfURI, "ID", getId());
                        // xmlsw.writeCharacters("\n");
                    } catch (XMLStreamException e) {
                        StringBuilder errorMessage = new StringBuilder(
                                "Error while trying to write the class ");
                        errorMessage.append("VoltageLevel ");
                        errorMessage.append("which ID has been initialized to : ");
                        errorMessage.append(getId());
                        errorMessage.append(" in the subset ");
                        errorMessage.append("Equipment");
                        LOGGER.error(errorMessage.toString());
                        LOGGER.error(e.toString(), e);
                    }
                }

                writeClass(xmlsw);
                super.write(xmlsw, subset, false);
                if (writeID) {

                    try {
                        xmlsw.writeEndElement();
                        // xmlsw.writeCharacters("\n");
                    } catch (XMLStreamException e) {
                        StringBuilder errorMessage = new StringBuilder(
                                "Error while trying to write end element of ");
                        errorMessage.append("VoltageLevel ");
                        errorMessage.append("which ID has been initialized to : ");
                        errorMessage.append(getId());
                        errorMessage.append(" in the subset ");
                        errorMessage.append("Equipment");
                        LOGGER.error(errorMessage.toString());
                        LOGGER.error(e.toString(), e);
                    }

                }
                break;
            }
            default: { // Do nothing !
            }
        }
        return;
    }

    /**
     * Utility to resolve the links at the end of parsing
     *
     * @param model
     *            the model this class belongs to
     * @param boundaryModel
     *            the model that gather data about the boundarySet, used
     *            as a resource force links resolving
     * @throws Linkage Exception
     */
    @Override
    public void resolveLinks(CIMModel model, CIMModel boundaryModel) throws LinkageException {
        if (idBaseVoltage != null) {
            BaseVoltage attributeToSet =
                    model.searchBaseVoltage(idBaseVoltage);

            if (attributeToSet != null) {
                boolean setInverse = true;

                try {
                    this.setBaseVoltage(attributeToSet, setInverse);
                } catch (LinkageException e) {
                    LOGGER.error(e.toString(), e);
                    throw new LinkageException(e.getMessage());
                }
            } else if (boundaryModel != null) {
                BaseVoltage attributeToSetFromBoundary = boundaryModel.searchBaseVoltage(idBaseVoltage);
                if (attributeToSetFromBoundary != null) {
                    attributeToSetFromBoundary.setFromBoundary(true);
                    try {
                        model.createBaseVoltage(idBaseVoltage, attributeToSetFromBoundary);
                    } catch (InterpretationException e) {
                        LOGGER.error(e.toString(), e);
                    }
                    boolean setInverse = true;
                    try {
                        this.setBaseVoltage(attributeToSetFromBoundary, setInverse);
                    } catch (LinkageException e) {
                        LOGGER.error(e.toString(), e);
                        throw new LinkageException(e.getMessage());
                    }
                    attributeToSetFromBoundary.resolveLinks(model, boundaryModel);
                } else {
                    StringBuilder errorMessage = new StringBuilder(
                            "Could not find the reference to object of type \"BaseVoltage\" and id \"");
                    errorMessage.append(idBaseVoltage);
                    errorMessage.append("\" in \"VoltageLevel\" of id \"");
                    errorMessage.append(this.getId());
                    errorMessage.append("\" !");
                    throw new LinkageException(errorMessage.toString());
                }
            } else {
                StringBuilder errorMessage = new StringBuilder(
                        "Could not find the reference to object of type \"BaseVoltage\" and id \"");
                errorMessage.append(idBaseVoltage);
                errorMessage.append("\" in \"VoltageLevel\" of id \"");
                errorMessage.append(this.getId());
                errorMessage.append("\" !");
                throw new LinkageException(errorMessage.toString());
            }
        }


        if (idMemberOfSubstation != null) {
            Substation attributeToSet =
                    model.searchSubstation(idMemberOfSubstation);

            if (attributeToSet != null) {
                boolean setInverse = true;

                try {
                    this.setMemberOfSubstation(attributeToSet, setInverse);
                } catch (LinkageException e) {
                    LOGGER.error(e.toString(), e);
                    throw new LinkageException(e.getMessage());
                }
            } else if (boundaryModel != null) {
                Substation attributeToSetFromBoundary = boundaryModel.searchSubstation(idMemberOfSubstation);
                if (attributeToSetFromBoundary != null) {
                    attributeToSetFromBoundary.setFromBoundary(true);
                    try {
                        model.createSubstation(idMemberOfSubstation, attributeToSetFromBoundary);
                    } catch (InterpretationException e) {
                        LOGGER.error(e.toString(), e);
                    }
                    boolean setInverse = true;
                    try {
                        this.setMemberOfSubstation(attributeToSetFromBoundary, setInverse);
                    } catch (LinkageException e) {
                        LOGGER.error(e.toString(), e);
                        throw new LinkageException(e.getMessage());
                    }
                    attributeToSetFromBoundary.resolveLinks(model, boundaryModel);
                } else {
                    StringBuilder errorMessage = new StringBuilder(
                            "Could not find the reference to object of type \"Substation\" and id \"");
                    errorMessage.append(idMemberOfSubstation);
                    errorMessage.append("\" in \"VoltageLevel\" of id \"");
                    errorMessage.append(this.getId());
                    errorMessage.append("\" !");
                    throw new LinkageException(errorMessage.toString());
                }
            } else {
                StringBuilder errorMessage = new StringBuilder(
                        "Could not find the reference to object of type \"Substation\" and id \"");
                errorMessage.append(idMemberOfSubstation);
                errorMessage.append("\" in \"VoltageLevel\" of id \"");
                errorMessage.append(this.getId());
                errorMessage.append("\" !");
                throw new LinkageException(errorMessage.toString());
            }
        }


        super.resolveLinks(model, boundaryModel);
        removeFromUnresolved();
    }

    /**
     * Utility to check whether this class is consistent according to a subset
     *
     * @param subset
     *            the subset defining the context in which to check whether this class is consistent
     * @return a ConsistencyCheck instance whose boolean attribute (consistent)
     *         indicates if this class is consistent and whose String attribute
     *         (message)
     *         indicates why this class is not consistent if it is not
     */
    @Override
    public ConsistencyCheck modelConsistency(final Subset subset) {
        BitSet intersection = new BitSet(this.minBitsets.get(subset).length());
        intersection.or(this.minBitsets.get(subset));
        // we create a copy of minBitsets.get(subset)
        intersection.and(this.currentBitset);
        boolean consistent = this.minBitsets.get(subset).equals(intersection);
        StringBuilder message = new StringBuilder("");

        if (!consistent) {
            message.append(getMessageForConsistency(this.minBitsets.get(subset)));
        }
        // consistent = (super.modelConsistency().getLeft()) ? (consistent &&
        // (true)):(consistent && (false))
        // message.append((super.modelConsistency(subset)).getRight());

        if (super.modelConsistency().isConsistent()) {
            //consistent = consistent && true;
            message.append((super.modelConsistency(subset)).getMessage());
        } else {
            // consistent = consistent && false;
            consistent = false;
            message.append((super.modelConsistency(subset)).getMessage());
        }

        return new ConsistencyCheck(consistent, message.toString());
    }

    /**
     * Utility to check whether this class is consistent in a "merged" context
     *
     * @return a ConsistencyCheck instance whose boolean attribute (consistent)
     *         indicates if this class is consistent and whose String attribute
     *         (message)
     *         indicates why this class is not consistent if it is not
     */
    @Override
    public ConsistencyCheck modelConsistency() {
        BitSet intersection = new BitSet(this.minBitset.length());
        intersection.or(this.minBitset);
        // we create a copy of minBitSet
        intersection.and(this.currentBitset);
        boolean consistent = this.minBitset.equals(intersection);
        StringBuilder message = new StringBuilder("");

        if (!consistent) {
            message.append(getMessageForConsistency(this.minBitset));
        }
        // consistent = (super.modelConsistency().getLeft()) ? (consistent &&
        // (true)):(consistent && (false))
        // message += (super.modelConsistency(subset)).getRight();

        if (super.modelConsistency().isConsistent()) {
            // consistent = consistent && true;
            message.append((super.modelConsistency()).getMessage());
        } else {
            // consistent = consistent && false;
            consistent = false;
            message.append((super.modelConsistency()).getMessage());
        }

        return new ConsistencyCheck(consistent, message.toString());
    }

    /**
     * Utility to copy the "base" of an other instance of the same class
     * This utility does not copy the associations with other instances from
     * the instance to copy
     *
     * @param otherVoltageLevel
     *            the instance to copy
     */
    public void copyBase(final VoltageLevel otherVoltageLevel) {


        // Memory allocation has done successfully !
        // Dropping "old" objects...
        // This part may change : we do nothing to allow the user to access
        // object by their id from the global model.

        if (otherVoltageLevel.currentBitset.get(0)) {
            BaseVoltage baseVoltageAssociation = otherVoltageLevel.getBaseVoltage();

            //this.idBaseVoltage = (baseVoltageAssociation != null) ? baseVoltageAssociation.getId() : "";
            if (baseVoltageAssociation != null) {
                this.idBaseVoltage = baseVoltageAssociation.getId();
                // the proper bit will be set when the setter is called
            } else {
                this.idBaseVoltage = "";
            }
        }

        if (otherVoltageLevel.currentBitset.get(1)) {
            Substation memberOfSubstationAssociation = otherVoltageLevel.getMemberOfSubstation();

            //this.idMemberOf_Substation = (memberOf_SubstationAssociation != null) ? memberOf_SubstationAssociation.getId() : "";
            if (memberOfSubstationAssociation != null) {
                this.idMemberOfSubstation = memberOfSubstationAssociation.getId();
                // the proper bit will be set when the setter is called
            } else {
                this.idMemberOfSubstation = "";
            }
        }

        // TODO : Call the parent copy constructor instead ?
        super.copyBase(otherVoltageLevel);

    }

    /**
     * Utility to return the content of this class into the CIM XML format
     *
     * @param xmlsw
     *            the stream in which are stored the elements to write
     */
    private void writeClass(XMLStreamWriter xmlsw) {

        if (currentBitset.get(0)) {
            if (idBaseVoltage != null) {
                try {
                    // xmlsw.writeCharacters("\t");
                    xmlsw.writeEmptyElement(CIMURI.CIMURI,
                            "VoltageLevel.BaseVoltage");
                    xmlsw.writeAttribute(CIMModel.rdfURI, "resource", "#"
                            + idBaseVoltage);
                    // xmlsw.writeCharacters("\n");
                } catch (XMLStreamException e) {
                    StringBuilder errorMessage = new StringBuilder(
                            "Error while trying to write the resource attribute ");
                    errorMessage.append("BaseVoltage");
                    errorMessage.append(" in class ");
                    errorMessage.append("VoltageLevel ");
                    errorMessage.append("which ID has been initialized to : ");
                    errorMessage.append(getId());
                    LOGGER.error(errorMessage.toString());
                    LOGGER.error(e.toString(), e);
                }
            }
        }

        if (currentBitset.get(1)) {
            if (idMemberOfSubstation != null) {
                try {
                    // xmlsw.writeCharacters("\t");
                    xmlsw.writeEmptyElement(CIMURI.CIMURI,
                            "VoltageLevel.MemberOf_Substation");
                    xmlsw.writeAttribute(CIMModel.rdfURI, "resource", "#"
                            + idMemberOfSubstation);
                    // xmlsw.writeCharacters("\n");
                } catch (XMLStreamException e) {
                    StringBuilder errorMessage = new StringBuilder(
                            "Error while trying to write the resource attribute ");
                    errorMessage.append("MemberOf_Substation");
                    errorMessage.append(" in class ");
                    errorMessage.append("VoltageLevel ");
                    errorMessage.append("which ID has been initialized to : ");
                    errorMessage.append(getId());
                    LOGGER.error(errorMessage.toString());
                    LOGGER.error(e.toString(), e);
                }
            }
        }

        return;
    }

    /**
     * Utility in charge of creating the message when the class is not
     * consistent within a specific context
     *
     * @param minBitset
     *            bitset describing which CIM attributes of this class have
     *            to be set so that it is consistent within a
     *            specific subset context
     * @return the message explaining what is not consistent
     */
    private String getMessageForConsistency(final BitSet minBitset) {

        StringBuilder message = new StringBuilder(
                "Instance of \"VoltageLevel\" of id \"");
        message.append(this.getId());
        message.append("\" is not consistent in this context:\n");
        /*
         * XOR and then AND
         * The result is :
         * "1" : has not been set and need to be
         * "0" : has been set or is not mandatory
         */

        BitSet isNotSet = new BitSet(minBitset.length());
        isNotSet.or(minBitset);
        // we create a copy of minBitset
        isNotSet.xor(this.currentBitset);
        isNotSet.and(minBitset);

        if (isNotSet.get(0)) {
            message.append("\t\"BaseVoltage\" needs to be set\n");
        }

        if (isNotSet.get(1)) {
            message.append("\t\"MemberOf_Substation\" needs to be set\n");
        }
        return message.toString();
    }

    /**
     * Copy constructor
     * The associations with other objects are not copied
     *
     * @param VoltageLevel
     *            the reference to the class to copy
     * @return the class constructed
     */
    private VoltageLevel(final VoltageLevel otherVoltageLevel) {
        // TODO : check exception safe
        this.copyBase(otherVoltageLevel);
    }

   /**
    * Constructor of the class VoltageLevel
    */
    protected VoltageLevel() {

        super.subset = Subset.Equipment;
        this.minBitsets.put(Subset.StateVariables, new BitSet(2));
        this.minBitsets.put(Subset.Topology, new BitSet(2));
        BitSet classBitset = new BitSet(2);
        classBitset.set(0);
        classBitset.set(1);
        this.minBitsets.put(Subset.Equipment, classBitset);
    }



    /**
     * Utility to clear the associations of this class belonging to a
     * specific subset
     *
     * @param subset
     *            the subset from which to clear the associations of this class
     */
    @Override
    protected void clearAssociations(final Subset subset) {

        switch (subset) {
            case StateVariables: {
                super.clearAssociations(subset);
                break;
            }
            case Topology: {
                super.clearAssociations(subset);
                break;
            }
            case Equipment: {
                // reset the Reference
                baseVoltage = null;
                idBaseVoltage = "";
                this.currentBitset.clear(0);
                // reset the Reference
                memberOfSubstation = null;
                idMemberOfSubstation = "";
                this.currentBitset.clear(1);
                super.clearAssociations(subset);
                break;
            }
            default: // nothing to clear
        }
    }

    /**
     * Utility returning a copy of the "base" of this instance
     * This utility does not copy the associations with other instances
     *
     * @return a clone of this instance
     */
    public VoltageLevel clone() {
        VoltageLevel newInstance = new VoltageLevel(this);
        VoltageLevel newInstanceSP = newInstance;
        return newInstanceSP;
    }
}
